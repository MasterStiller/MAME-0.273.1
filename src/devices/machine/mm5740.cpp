// license:BSD-3-Clause
// copyright-holders:R. Belmont, Mark Garlanger
/**********************************************************************

    Nathional Semiconductor MM5740 Keyboard Encoder emulation
    (Code based on kb3600.cpp)

*********************************************************************/

#include "mm5740.h"


//**************************************************************************
//  GLOBAL VARIABLES
//**************************************************************************

// devices
const device_type MM5740 = &device_creator<mm5740_device>;

//**************************************************************************
//  LIVE DEVICE
//**************************************************************************

//-------------------------------------------------
//  mm5740_device - constructor
//-------------------------------------------------

mm5740_device::mm5740_device(const machine_config &mconfig, const char *tag, device_t *owner, uint32_t clock)
	: device_t(mconfig, MM5740, "MM5740", tag, owner, clock, "mm5740", __FILE__),
	m_read_x1(*this),
	m_read_x2(*this),
	m_read_x3(*this),
	m_read_x4(*this),
	m_read_x5(*this),
	m_read_x6(*this),
	m_read_x7(*this),
	m_read_x8(*this),
	m_read_x9(*this),
	m_read_shift(*this),
	m_read_control(*this),
	m_write_data_ready(*this)
{
	for (auto & elem : m_x_mask)
	{
		elem = 0;
	}
}


uint16_t mm5740AAC_Unshift_mapping[9][10] = {
	0b00111111111,  // X1 Y1
	0b00111011111,  // X1 Y2
	0b00111101111,  // X1 Y3
	0b00111001111,  // X1 Y4
	0b00011111111,  // X1 Y5
	0b00011011111,  // X1 Y6
	0b00011101111,  // X1 Y7
	0b00011001111,  // X1 Y8
	0b00111110111,  // X1 Y9
	0b00111010111,  // X1 Y10
	0b00111100111,  // X2 Y1
	0b00111000111,  // X2 Y2
	0b00011110111,  // X2 Y3
	0b00011010111,  // X2 Y4
	0b00011100111,  // X2 Y5
	0b00011000111,  // X2 Y6
	0b00111111011,  // X2 Y7
	0b00111011011,  // X2 Y8
	0b00111101011,  // X2 Y9
	0b00111001011,  // X2 Y10
	0b00011111011,  // X3 Y1
	0b00011011011,  // X3 Y2
	0b00011101011,  // X3 Y3
	0b00011001011,  // X3 Y4
	0b00111110011,  // X3 Y5
	0b00111010011,  // X3 Y6
	0b00111100011,  // X3 Y7
	0b00111000011,  // X3 Y8
	0b00011110011,  // X3 Y9
	0b00011010011,  // X3 Y10
	0b00011100011,  // X4 Y1
	0b00011000011,  // X4 Y2
	0b00111111101,  // X4 Y3
	0b00111011101,  // X4 Y4
	0b00111101101,  // X4 Y5
	0b00111001101,  // X4 Y6
	0b00011111101,  // X4 Y7
	0b00011011101,  // X4 Y8
	0b00011101101,  // X4 Y9
	0b00011001101,  // X4 Y10
	0b00111110101,  // X5 Y1
	0b00111010101,  // X5 Y2
	0b00111100101,  // X5 Y3
	0b00111000101,  // X5 Y4
	0b00011110101,  // X5 Y5
	0b00011010101,  // X5 Y6
	0b00011100101,  // X5 Y7
	0b00011000101,  // X5 Y8
	0b00111111001,  // X5 Y9
	0b00111011001,  // X5 Y10
	0b00111101001,  // X6 Y1
	0b00111001001,  // X6 Y2
	0b00011111001,  // X6 Y3
	0b00011011001,  // X6 Y4
	0b00011101001,  // X6 Y5
	0b00011001001,  // X6 Y6
	0b00111110001,  // X6 Y7
	0b00111010001,  // X6 Y8
	0b00111100001,  // X6 Y9
	0b00111000001,  // X6 Y10
	0b00011110001,  // X7 Y1
	0b00011010001,  // X7 Y2
	0b00011100001,  // X7 Y3
	0b00011000001,  // X7 Y4
	0b00111111110,  // X7 Y5
	0b00111011110,  // X7 Y6
	0b00111101110,  // X7 Y7
	0b00111001110,  // X7 Y8
	0b00011111110,  // X7 Y9
	0b00011011110,  // X7 Y10
	0b00011101110,  // X8 Y1
	0b00011001110,  // X8 Y2
	0b00111110110,  // X8 Y3
	0b00111010110,  // X8 Y4
	0b00111100110,  // X8 Y5
	0b00111000110,  // X8 Y6
	0b00011110110,  // X8 Y7
	0b00011010110,  // X8 Y8
	0b00011100110,  // X8 Y9
	0b00011000110,  // X8 Y10
	0b00111111010,  // X9 Y1
	0b00111011010,  // X9 Y2
	0b00111101010,  // X9 Y3
	0b00111001010,  // X9 Y4
	0b00011111010,  // X9 Y5
	0b00011011010,  // X9 Y6
	0b00011101010,  // X9 Y7
	0b00011001010,  // X9 Y8
	0b00111110010,  // X9 Y9
	0b00111010010,  // X9 Y10
};

uint16_t mm5740AAC_Shift_mapping[9][10] = {
	0b00101111111,  // X1 Y1
	0b00101011111,  // X1 Y2
	0b00101101111,  // X1 Y3
	0b00101001111,  // X1 Y4
	0b00001111111,  // X1 Y5
	0b00001011111,  // X1 Y6
	0b00001101111,  // X1 Y7
	0b00001001111,  // X1 Y8
	0b00101110111,  // X1 Y9
	0b00101010111,  // X1 Y10
	0b00101100111,  // X2 Y1
	0b00101000111,  // X2 Y2
	0b00001110111,  // X2 Y3
	0b00001010111,  // X2 Y4
	0b00001100111,  // X2 Y5
	0b00001000111,  // X2 Y6
	0b00101111011,  // X2 Y7
	0b00101011011,  // X2 Y8
	0b00101101011,  // X2 Y9
	0b00101001011,  // X2 Y10
	0b00001111011,  // X3 Y1
	0b00001011011,  // X3 Y2
	0b00001101011,  // X3 Y3
	0b00001001011,  // X3 Y4
	0b00101110011,  // X3 Y5
	0b00101010011,  // X3 Y6
	0b00101100011,  // X3 Y7
	0b00101000011,  // X3 Y8
	0b00001110011,  // X3 Y9
	0b00001010011,  // X3 Y10
	0b00001100011,  // X4 Y1
	0b00001000011,  // X4 Y2
	0b00101111101,  // X4 Y3
	0b00101011101,  // X4 Y4
	0b00101101101,  // X4 Y5
	0b00101001101,  // X4 Y6
	0b00001111101,  // X4 Y7
	0b00001011101,  // X4 Y8
	0b00001101101,  // X4 Y9
	0b00001001101,  // X4 Y10
	0b00101110101,  // X5 Y1
	0b00101010101,  // X5 Y2
	0b00101100101,  // X5 Y3
	0b00101000101,  // X5 Y4
	0b00001110101,  // X5 Y5
	0b00001010101,  // X5 Y6
	0b00001100101,  // X5 Y7
	0b00001000101,  // X5 Y8
	0b00101111001,  // X5 Y9
	0b00101011001,  // X5 Y10
	0b00101101001,  // X6 Y1
	0b00101001001,  // X6 Y2
	0b00001111001,  // X6 Y3
	0b00001011001,  // X6 Y4
	0b00001101001,  // X6 Y5
	0b00001001001,  // X6 Y6
	0b00101110001,  // X6 Y7
	0b00101010001,  // X6 Y8
	0b00101100001,  // X6 Y9
	0b00101000001,  // X6 Y10
	0b00001110001,  // X7 Y1
	0b00001010001,  // X7 Y2
	0b00001100001,  // X7 Y3
	0b00001000001,  // X7 Y4
	0b00101111110,  // X7 Y5
	0b00101011110,  // X7 Y6
	0b00101101110,  // X7 Y7
	0b00101001110,  // X7 Y8
	0b00001111110,  // X7 Y9
	0b00001011110,  // X7 Y10
	0b00001101110,  // X8 Y1
	0b00001001110,  // X8 Y2
	0b00101110110,  // X8 Y3
	0b00101010110,  // X8 Y4
	0b00101100110,  // X8 Y5
	0b00101000110,  // X8 Y6
	0b00001110110,  // X8 Y7
	0b00001010110,  // X8 Y8
	0b00001100110,  // X8 Y9
	0b00001000110,  // X8 Y10
	0b00101111010,  // X9 Y1
	0b00101011010,  // X9 Y2
	0b00101101010,  // X9 Y3
	0b00101001010,  // X9 Y4
	0b00001111010,  // X9 Y5
	0b00001011010,  // X9 Y6
	0b00001101010,  // X9 Y7
	0b00001001010,  // X9 Y8
	0b00101110010,  // X9 Y9
	0b00101010010,  // X9 Y10
};

uint16_t mm5740AAC_Control_mapping[9][10] = {
	0b00110111111,  // X1 Y1
	0b00110011111,  // X1 Y2
	0b00110101111,  // X1 Y3
	0b00110001111,  // X1 Y4
	0b00010111111,  // X1 Y5
	0b00010011111,  // X1 Y6
	0b00010101111,  // X1 Y7
	0b00010001111,  // X1 Y8
	0b00110110111,  // X1 Y9
	0b00110010111,  // X1 Y10
	0b00110100111,  // X2 Y1
	0b00110000111,  // X2 Y2
	0b00010110111,  // X2 Y3
	0b00010010111,  // X2 Y4
	0b00010100111,  // X2 Y5
	0b00010000111,  // X2 Y6
	0b00110111011,  // X2 Y7
	0b00110011011,  // X2 Y8
	0b00110101011,  // X2 Y9
	0b00110001011,  // X2 Y10
	0b00010111011,  // X3 Y1
	0b00010011011,  // X3 Y2
	0b00010101011,  // X3 Y3
	0b00010001011,  // X3 Y4
	0b00110110011,  // X3 Y5
	0b00110010011,  // X3 Y6
	0b00110100011,  // X3 Y7
	0b00110000011,  // X3 Y8
	0b00010110011,  // X3 Y9
	0b00010010011,  // X3 Y10
	0b00010100011,  // X4 Y1
	0b00010000011,  // X4 Y2
	0b00110111101,  // X4 Y3
	0b00110011101,  // X4 Y4
	0b00110101101,  // X4 Y5
	0b00110001101,  // X4 Y6
	0b00010111101,  // X4 Y7
	0b00010011101,  // X4 Y8
	0b00010101101,  // X4 Y9
	0b00010001101,  // X4 Y10
	0b00110110101,  // X5 Y1
	0b00110010101,  // X5 Y2
	0b00110100101,  // X5 Y3
	0b00110000101,  // X5 Y4
	0b00010110101,  // X5 Y5
	0b00010010101,  // X5 Y6
	0b00010100101,  // X5 Y7
	0b00010000101,  // X5 Y8
	0b00110111001,  // X5 Y9
	0b00110011001,  // X5 Y10
	0b00110101001,  // X6 Y1
	0b00110001001,  // X6 Y2
	0b00010111001,  // X6 Y3
	0b00010011001,  // X6 Y4
	0b00010101001,  // X6 Y5
	0b00010001001,  // X6 Y6
	0b00110110001,  // X6 Y7
	0b00110010001,  // X6 Y8
	0b00110100001,  // X6 Y9
	0b00110000001,  // X6 Y10
	0b00010110001,  // X7 Y1
	0b00010010001,  // X7 Y2
	0b00010100001,  // X7 Y3
	0b00010000001,  // X7 Y4
	0b00110111110,  // X7 Y5
	0b00110011110,  // X7 Y6
	0b00110101110,  // X7 Y7
	0b00110001110,  // X7 Y8
	0b00010111110,  // X7 Y9
	0b00010011110,  // X7 Y10
	0b00010101110,  // X8 Y1
	0b00010001110,  // X8 Y2
	0b00110110110,  // X8 Y3
	0b00110010110,  // X8 Y4
	0b00110100110,  // X8 Y5
	0b00110000110,  // X8 Y6
	0b00010110110,  // X8 Y7
	0b00010010110,  // X8 Y8
	0b00010100110,  // X8 Y9
	0b00010000110,  // X8 Y10
	0b00110111010,  // X9 Y1
	0b00110011010,  // X9 Y2
	0b00110101010,  // X9 Y3
	0b00110001010,  // X9 Y4
	0b00010111010,  // X9 Y5
	0b00010011010,  // X9 Y6
	0b00010101010,  // X9 Y7
	0b00010001010,  // X9 Y8
	0b00110110010,  // X9 Y9
	0b00110010010,  // X9 Y10
};

uint16_t mm5740AAC_ShiftControl_mapping[9][10] = {
	0b00100111111,  // X1 Y1
	0b00100011111,  // X1 Y2
	0b00100101111,  // X1 Y3
	0b00100001111,  // X1 Y4
	0b00000111111,  // X1 Y5
	0b00000011111,  // X1 Y6
	0b00000101111,  // X1 Y7
	0b00000001111,  // X1 Y8
	0b00100110111,  // X1 Y9
	0b00100010111,  // X1 Y10
	0b00100100111,  // X2 Y1
	0b00100000111,  // X2 Y2
	0b00000110111,  // X2 Y3
	0b00000010111,  // X2 Y4
	0b00000100111,  // X2 Y5
	0b00000000111,  // X2 Y6
	0b00100111011,  // X2 Y7
	0b00100011011,  // X2 Y8
	0b00100101011,  // X2 Y9
	0b00100001011,  // X2 Y10
	0b00000111011,  // X3 Y1
	0b00000011011,  // X3 Y2
	0b00000101011,  // X3 Y3
	0b00000001011,  // X3 Y4
	0b00100110011,  // X3 Y5
	0b00100010011,  // X3 Y6
	0b00100100011,  // X3 Y7
	0b00100000011,  // X3 Y8
	0b00000110011,  // X3 Y9
	0b00000010011,  // X3 Y10
	0b00000100011,  // X4 Y1
	0b00000000011,  // X4 Y2
	0b00100111101,  // X4 Y3
	0b00100011101,  // X4 Y4
	0b00100101101,  // X4 Y5
	0b00100001101,  // X4 Y6
	0b00000111101,  // X4 Y7
	0b00000011101,  // X4 Y8
	0b00000101101,  // X4 Y9
	0b00000001101,  // X4 Y10
	0b00100110101,  // X5 Y1
	0b00100010101,  // X5 Y2
	0b00100100101,  // X5 Y3
	0b00100000101,  // X5 Y4
	0b00000110101,  // X5 Y5
	0b00000010101,  // X5 Y6
	0b00000100101,  // X5 Y7
	0b00000000101,  // X5 Y8
	0b00100111001,  // X5 Y9
	0b00100011001,  // X5 Y10
	0b00100101001,  // X6 Y1
	0b00100001001,  // X6 Y2
	0b00000111001,  // X6 Y3
	0b00000011001,  // X6 Y4
	0b00000101001,  // X6 Y5
	0b00000001001,  // X6 Y6
	0b00100110001,  // X6 Y7
	0b00100010001,  // X6 Y8
	0b00100100001,  // X6 Y9
	0b00100000001,  // X6 Y10
	0b00000110001,  // X7 Y1
	0b00000010001,  // X7 Y2
	0b00000100001,  // X7 Y3
	0b00000000001,  // X7 Y4
	0b00100111110,  // X7 Y5
	0b00100011110,  // X7 Y6
	0b00100101110,  // X7 Y7
	0b00100001110,  // X7 Y8
	0b00000111110,  // X7 Y9
	0b00000011110,  // X7 Y10
	0b00000101110,  // X8 Y1
	0b00000001110,  // X8 Y2
	0b00100110110,  // X8 Y3
	0b00100010110,  // X8 Y4
	0b00100100110,  // X8 Y5
	0b00100000110,  // X8 Y6
	0b00000110110,  // X8 Y7
	0b00000010110,  // X8 Y8
	0b00000100110,  // X8 Y9
	0b00000000110,  // X8 Y10
	0b00100111010,  // X9 Y1
	0b00100011010,  // X9 Y2
	0b00100101010,  // X9 Y3
	0b00100001010,  // X9 Y4
	0b00000111010,  // X9 Y5
	0b00000011010,  // X9 Y6
	0b00000101010,  // X9 Y7
	0b00000001010,  // X9 Y8
	0b00100110010,  // X9 Y9
	0b00100010010,  // X9 Y10
};


//-------------------------------------------------
//  device_start - device-specific startup
//-------------------------------------------------

void mm5740_device::device_start()
{
	// resolve callbacks
	m_read_x1.resolve_safe(0x3ff);
	m_read_x2.resolve_safe(0x3ff);
	m_read_x3.resolve_safe(0x3ff);
	m_read_x4.resolve_safe(0x3ff);
	m_read_x5.resolve_safe(0x3ff);
	m_read_x6.resolve_safe(0x3ff);
	m_read_x7.resolve_safe(0x3ff);
	m_read_x8.resolve_safe(0x3ff);
	m_read_x9.resolve_safe(0x3ff);
	m_read_shift.resolve_safe(0);
	m_read_control.resolve_safe(0);
	m_write_data_ready.resolve_safe();

	// allocate timers
	m_scan_timer = timer_alloc();
	m_scan_timer->adjust(attotime::from_hz(60), 0, attotime::from_hz(60));

	// state saving
	save_item(NAME(m_b));
	save_item(NAME(m_x_mask));
}


//-------------------------------------------------
//  device_start - device-specific reset
//-------------------------------------------------

void mm5740_device::device_reset()
{
}

//-------------------------------------------------
//  device_timer - handler timer events
//-------------------------------------------------

void mm5740_device::device_timer(emu_timer &timer, device_timer_id id, int param, void *ptr)
{
	int ako = 0;

	for (int x = 0; x < 9; x++)
	{
		uint16_t data = 0;

		switch(x)
		{
			case 0: data = m_read_x1();
			break;
			case 1: data = m_read_x2();
			break;
			case 2: data = m_read_x3();
			break;
			case 3: data = m_read_x4();
			break;
			case 4: data = m_read_x5();
			break;
			case 5: data = m_read_x6();
			break;
			case 6: data = m_read_x7();
			break;
			case 7: data = m_read_x8();
			break;
			case 8: data = m_read_x9();
			break;
		}
		data ^= 0x3ff;
		for (int y = 0; y < 10; y++)
		{

			if (BIT(data, y))
			{
				bool shifted = m_read_shift();
				bool ctrl    = m_read_control();

				uint16_t b;
				if (shifted)
				{
					if (ctrl)
					{
						b = mm5740AAC_ShiftControl_mapping[x][y];
					}
					else
					{
						b = mm5740AAC_Shift_mapping[x][y];
					}
				}
				else
				{
					if (ctrl)
					{
						b = mm5740AAC_Control_mapping[x][y];
					}
					else
					{
						b = mm5740AAC_Unshift_mapping[x][y];
					}

				}
				ako = 1;
				b ^= 0x1ff;

				if (!(m_x_mask[x] & (1 << y)))
				{
					m_x_mask[x] |= (1 << y);
					if (m_b != b)
					{
						m_b = b;
	
						m_write_data_ready(ASSERT_LINE);
	
						return;
					}
				}
			}
			else    // key released, unmark it from the "down" info
			{
				m_x_mask[x] &= ~(1 << y);
			}
		}
	}

	if (!ako)
	{
		m_b = -1;
	}
}


//-------------------------------------------------
//  b_r -
//-------------------------------------------------

uint16_t mm5740_device::b_r()
{
	m_write_data_ready(CLEAR_LINE);
	return m_b;
}

