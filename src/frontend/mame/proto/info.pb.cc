// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#include "info.pb.h"
#include "emu.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_adjuster_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_biosset_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chip_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_condition_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_configuration_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configuration_ConfLocation_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_configuration_ConfSetting_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_device_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_device_DeviceInstance_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_device_Extension_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_device_ref_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_dipswitch_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dipswitch_DipLocation_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dipswitch_DipValue_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_disk_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_display_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_driver_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_feature_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_input_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_input_Control_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_machine_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_port_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_port_Analog_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ramoption_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rom_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sample_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_slot_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_slot_SlotOption_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_softwarelist_info_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_info_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sound_info_2eproto;
namespace infoprotobuf {
class mameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mame> _instance;
} _mame_default_instance_;
class machineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<machine> _instance;
} _machine_default_instance_;
class biossetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<biosset> _instance;
} _biosset_default_instance_;
class romDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rom> _instance;
} _rom_default_instance_;
class diskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<disk> _instance;
} _disk_default_instance_;
class hashesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hashes> _instance;
} _hashes_default_instance_;
class device_refDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<device_ref> _instance;
} _device_ref_default_instance_;
class chipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chip> _instance;
} _chip_default_instance_;
class sampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sample> _instance;
} _sample_default_instance_;
class displayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<display> _instance;
} _display_default_instance_;
class soundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sound> _instance;
} _sound_default_instance_;
class conditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<condition> _instance;
} _condition_default_instance_;
class input_ControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<input_Control> _instance;
} _input_Control_default_instance_;
class inputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<input> _instance;
} _input_default_instance_;
class dipswitch_DipLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dipswitch_DipLocation> _instance;
} _dipswitch_DipLocation_default_instance_;
class dipswitch_DipValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dipswitch_DipValue> _instance;
} _dipswitch_DipValue_default_instance_;
class dipswitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dipswitch> _instance;
} _dipswitch_default_instance_;
class configuration_ConfLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configuration_ConfLocation> _instance;
} _configuration_ConfLocation_default_instance_;
class configuration_ConfSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configuration_ConfSetting> _instance;
} _configuration_ConfSetting_default_instance_;
class configurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configuration> _instance;
} _configuration_default_instance_;
class port_AnalogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<port_Analog> _instance;
} _port_Analog_default_instance_;
class portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<port> _instance;
} _port_default_instance_;
class adjusterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<adjuster> _instance;
} _adjuster_default_instance_;
class driverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<driver> _instance;
} _driver_default_instance_;
class featureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<feature> _instance;
} _feature_default_instance_;
class device_DeviceInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<device_DeviceInstance> _instance;
} _device_DeviceInstance_default_instance_;
class device_ExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<device_Extension> _instance;
} _device_Extension_default_instance_;
class deviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<device> _instance;
} _device_default_instance_;
class slot_SlotOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<slot_SlotOption> _instance;
} _slot_SlotOption_default_instance_;
class slotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<slot> _instance;
} _slot_default_instance_;
class softwarelistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<softwarelist> _instance;
} _softwarelist_default_instance_;
class ramoptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ramoption> _instance;
} _ramoption_default_instance_;
}  // namespace infoprotobuf
static void InitDefaultsscc_info_adjuster_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_adjuster_default_instance_;
    new (ptr) ::infoprotobuf::adjuster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::adjuster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_adjuster_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_adjuster_info_2eproto}, {
      &scc_info_condition_info_2eproto.base,}};

static void InitDefaultsscc_info_biosset_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_biosset_default_instance_;
    new (ptr) ::infoprotobuf::biosset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::biosset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_biosset_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_biosset_info_2eproto}, {}};

static void InitDefaultsscc_info_chip_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_chip_default_instance_;
    new (ptr) ::infoprotobuf::chip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::chip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chip_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_chip_info_2eproto}, {}};

static void InitDefaultsscc_info_condition_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_condition_default_instance_;
    new (ptr) ::infoprotobuf::condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_condition_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_condition_info_2eproto}, {}};

static void InitDefaultsscc_info_configuration_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_configuration_default_instance_;
    new (ptr) ::infoprotobuf::configuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::configuration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_configuration_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_configuration_info_2eproto}, {
      &scc_info_condition_info_2eproto.base,
      &scc_info_configuration_ConfLocation_info_2eproto.base,
      &scc_info_configuration_ConfSetting_info_2eproto.base,}};

static void InitDefaultsscc_info_configuration_ConfLocation_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_configuration_ConfLocation_default_instance_;
    new (ptr) ::infoprotobuf::configuration_ConfLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::configuration_ConfLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configuration_ConfLocation_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_configuration_ConfLocation_info_2eproto}, {}};

static void InitDefaultsscc_info_configuration_ConfSetting_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_configuration_ConfSetting_default_instance_;
    new (ptr) ::infoprotobuf::configuration_ConfSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::configuration_ConfSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_configuration_ConfSetting_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_configuration_ConfSetting_info_2eproto}, {
      &scc_info_condition_info_2eproto.base,}};

static void InitDefaultsscc_info_device_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_device_default_instance_;
    new (ptr) ::infoprotobuf::device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_device_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_device_info_2eproto}, {
      &scc_info_device_DeviceInstance_info_2eproto.base,
      &scc_info_device_Extension_info_2eproto.base,}};

static void InitDefaultsscc_info_device_DeviceInstance_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_device_DeviceInstance_default_instance_;
    new (ptr) ::infoprotobuf::device_DeviceInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::device_DeviceInstance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_device_DeviceInstance_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_device_DeviceInstance_info_2eproto}, {}};

static void InitDefaultsscc_info_device_Extension_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_device_Extension_default_instance_;
    new (ptr) ::infoprotobuf::device_Extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::device_Extension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_device_Extension_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_device_Extension_info_2eproto}, {}};

static void InitDefaultsscc_info_device_ref_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_device_ref_default_instance_;
    new (ptr) ::infoprotobuf::device_ref();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::device_ref::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_device_ref_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_device_ref_info_2eproto}, {}};

static void InitDefaultsscc_info_dipswitch_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_dipswitch_default_instance_;
    new (ptr) ::infoprotobuf::dipswitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::dipswitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_dipswitch_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_dipswitch_info_2eproto}, {
      &scc_info_dipswitch_DipLocation_info_2eproto.base,
      &scc_info_condition_info_2eproto.base,
      &scc_info_dipswitch_DipValue_info_2eproto.base,}};

static void InitDefaultsscc_info_dipswitch_DipLocation_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_dipswitch_DipLocation_default_instance_;
    new (ptr) ::infoprotobuf::dipswitch_DipLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::dipswitch_DipLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dipswitch_DipLocation_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dipswitch_DipLocation_info_2eproto}, {}};

static void InitDefaultsscc_info_dipswitch_DipValue_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_dipswitch_DipValue_default_instance_;
    new (ptr) ::infoprotobuf::dipswitch_DipValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::dipswitch_DipValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dipswitch_DipValue_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_dipswitch_DipValue_info_2eproto}, {
      &scc_info_condition_info_2eproto.base,}};

static void InitDefaultsscc_info_disk_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_disk_default_instance_;
    new (ptr) ::infoprotobuf::disk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::disk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_disk_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_disk_info_2eproto}, {}};

static void InitDefaultsscc_info_display_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_display_default_instance_;
    new (ptr) ::infoprotobuf::display();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::display::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_display_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_display_info_2eproto}, {}};

static void InitDefaultsscc_info_driver_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_driver_default_instance_;
    new (ptr) ::infoprotobuf::driver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::driver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_driver_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_driver_info_2eproto}, {}};

static void InitDefaultsscc_info_feature_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_feature_default_instance_;
    new (ptr) ::infoprotobuf::feature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::feature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_feature_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_feature_info_2eproto}, {}};

static void InitDefaultsscc_info_hashes_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_hashes_default_instance_;
    new (ptr) ::infoprotobuf::hashes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::hashes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_hashes_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_hashes_info_2eproto}, {}};

static void InitDefaultsscc_info_input_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_input_default_instance_;
    new (ptr) ::infoprotobuf::input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_input_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_input_info_2eproto}, {
      &scc_info_input_Control_info_2eproto.base,}};

static void InitDefaultsscc_info_input_Control_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_input_Control_default_instance_;
    new (ptr) ::infoprotobuf::input_Control();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::input_Control::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_input_Control_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_input_Control_info_2eproto}, {}};

static void InitDefaultsscc_info_machine_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_machine_default_instance_;
    new (ptr) ::infoprotobuf::machine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::machine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_machine_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 19, 0, InitDefaultsscc_info_machine_info_2eproto}, {
      &scc_info_biosset_info_2eproto.base,
      &scc_info_rom_info_2eproto.base,
      &scc_info_disk_info_2eproto.base,
      &scc_info_device_ref_info_2eproto.base,
      &scc_info_sample_info_2eproto.base,
      &scc_info_chip_info_2eproto.base,
      &scc_info_display_info_2eproto.base,
      &scc_info_sound_info_2eproto.base,
      &scc_info_input_info_2eproto.base,
      &scc_info_dipswitch_info_2eproto.base,
      &scc_info_configuration_info_2eproto.base,
      &scc_info_port_info_2eproto.base,
      &scc_info_adjuster_info_2eproto.base,
      &scc_info_driver_info_2eproto.base,
      &scc_info_feature_info_2eproto.base,
      &scc_info_device_info_2eproto.base,
      &scc_info_slot_info_2eproto.base,
      &scc_info_softwarelist_info_2eproto.base,
      &scc_info_ramoption_info_2eproto.base,}};

static void InitDefaultsscc_info_mame_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_mame_default_instance_;
    new (ptr) ::infoprotobuf::mame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::mame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mame_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mame_info_2eproto}, {
      &scc_info_machine_info_2eproto.base,}};

static void InitDefaultsscc_info_port_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_port_default_instance_;
    new (ptr) ::infoprotobuf::port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_port_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_port_info_2eproto}, {
      &scc_info_port_Analog_info_2eproto.base,}};

static void InitDefaultsscc_info_port_Analog_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_port_Analog_default_instance_;
    new (ptr) ::infoprotobuf::port_Analog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::port_Analog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_port_Analog_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_port_Analog_info_2eproto}, {}};

static void InitDefaultsscc_info_ramoption_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_ramoption_default_instance_;
    new (ptr) ::infoprotobuf::ramoption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::ramoption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ramoption_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ramoption_info_2eproto}, {}};

static void InitDefaultsscc_info_rom_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_rom_default_instance_;
    new (ptr) ::infoprotobuf::rom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::rom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rom_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rom_info_2eproto}, {}};

static void InitDefaultsscc_info_sample_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_sample_default_instance_;
    new (ptr) ::infoprotobuf::sample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::sample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sample_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sample_info_2eproto}, {}};

static void InitDefaultsscc_info_slot_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_slot_default_instance_;
    new (ptr) ::infoprotobuf::slot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::slot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_slot_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_slot_info_2eproto}, {
      &scc_info_slot_SlotOption_info_2eproto.base,}};

static void InitDefaultsscc_info_slot_SlotOption_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_slot_SlotOption_default_instance_;
    new (ptr) ::infoprotobuf::slot_SlotOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::slot_SlotOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_slot_SlotOption_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_slot_SlotOption_info_2eproto}, {}};

static void InitDefaultsscc_info_softwarelist_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_softwarelist_default_instance_;
    new (ptr) ::infoprotobuf::softwarelist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::softwarelist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_softwarelist_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_softwarelist_info_2eproto}, {}};

static void InitDefaultsscc_info_sound_info_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::infoprotobuf::_sound_default_instance_;
    new (ptr) ::infoprotobuf::sound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::infoprotobuf::sound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sound_info_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sound_info_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_info_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_info_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_info_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_info_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::mame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::mame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::mame, build_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::mame, debug_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::mame, mameconfig_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::mame, machine_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, sourcefile_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, isbios_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, isdevice_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, ismechanical_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, runnable_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, cloneof_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, romof_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, sampleof_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, description_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, year_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, biosset_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, rom_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, disk_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, device_ref_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, sample_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, chip_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, display_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, sound_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, input_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, dipswitch_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, configuration_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, port_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, adjuster_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, driver_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, feature_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, device_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, slot_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, softwarelist_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::machine, ramoption_),
  0,
  1,
  10,
  11,
  12,
  13,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::biosset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::biosset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::biosset, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::biosset, description_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::biosset, default__),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, sha1_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, merge_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, region_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, status_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, optional_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, bios_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, size_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, crc_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::rom, offset_),
  0,
  1,
  2,
  3,
  9,
  6,
  4,
  7,
  8,
  5,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, sha1_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, merge_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, region_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, status_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, optional_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, size_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, index_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::disk, writable_),
  0,
  1,
  2,
  3,
  8,
  6,
  5,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::hashes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::hashes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::hashes, sha1_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::hashes, crc_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::hashes, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_ref, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_ref, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_ref, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::chip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::chip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::chip, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::chip, tag_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::chip, type_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::chip, clock_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::sample, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::sample, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, tag_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, type_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, rotate_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, flipx_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, width_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, height_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, refresh_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, pixclock_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, htotal_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, hbend_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, hbstart_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, vtotal_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, vbend_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::display, vbstart_),
  0,
  12,
  13,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::sound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::sound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::sound, channels_),
  0,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::condition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::condition, tag_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::condition, mask_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::condition, relation_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::condition, value_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, type_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, player_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, buttons_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, reqbuttons_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, minimum_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, maximum_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, sensitivity_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, keydelta_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, reverse_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, ways_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, ways2_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input_Control, ways3_),
  0,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input, service_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input, tilt_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input, players_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input, coins_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::input, control_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipLocation, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipLocation, number_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipLocation, inverted_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipValue, condition_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipValue, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipValue, value_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch_DipValue, default__),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch, tag_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch, mask_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch, diplocation_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch, condition_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::dipswitch, dipvalue_),
  0,
  1,
  3,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfLocation, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfLocation, number_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfLocation, inverted_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfSetting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfSetting, condition_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfSetting, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfSetting, value_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration_ConfSetting, default__),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration, condition_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration, tag_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration, mask_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration, conflocation_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::configuration, confsetting_),
  3,
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::port_Analog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::port_Analog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::port_Analog, mask_),
  0,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::port, tag_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::port, analog_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::adjuster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::adjuster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::adjuster, condition_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::adjuster, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::adjuster, default__),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, status_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, emulation_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, cocktail_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, savestate_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, requireartwork_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, unofficial_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, nosoundhardware_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::driver, incomplete_),
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::feature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::feature, type_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::feature, status_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::feature, overall_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_DeviceInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_DeviceInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_DeviceInstance, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_DeviceInstance, briefname_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_Extension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_Extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device_Extension, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, type_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, tag_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, fixed_image_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, mandatory_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, interface_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, device_instance_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::device, extension_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot_SlotOption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot_SlotOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot_SlotOption, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot_SlotOption, devname_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot_SlotOption, default__),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::slot, slotoption_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::softwarelist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::softwarelist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::softwarelist, tag_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::softwarelist, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::softwarelist, status_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::softwarelist, filter_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::ramoption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::ramoption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::ramoption, name_),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::ramoption, default__),
  PROTOBUF_FIELD_OFFSET(::infoprotobuf::ramoption, value_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::infoprotobuf::mame)},
  { 13, 49, sizeof(::infoprotobuf::machine)},
  { 80, 88, sizeof(::infoprotobuf::biosset)},
  { 91, 106, sizeof(::infoprotobuf::rom)},
  { 116, 130, sizeof(::infoprotobuf::disk)},
  { 139, 147, sizeof(::infoprotobuf::hashes)},
  { 150, 156, sizeof(::infoprotobuf::device_ref)},
  { 157, 166, sizeof(::infoprotobuf::chip)},
  { 170, 176, sizeof(::infoprotobuf::sample)},
  { 177, 196, sizeof(::infoprotobuf::display)},
  { 210, 216, sizeof(::infoprotobuf::sound)},
  { 217, 226, sizeof(::infoprotobuf::condition)},
  { 230, 247, sizeof(::infoprotobuf::input_Control)},
  { 259, 269, sizeof(::infoprotobuf::input)},
  { 274, 282, sizeof(::infoprotobuf::dipswitch_DipLocation)},
  { 285, 294, sizeof(::infoprotobuf::dipswitch_DipValue)},
  { 298, 309, sizeof(::infoprotobuf::dipswitch)},
  { 315, 323, sizeof(::infoprotobuf::configuration_ConfLocation)},
  { 326, 335, sizeof(::infoprotobuf::configuration_ConfSetting)},
  { 339, 350, sizeof(::infoprotobuf::configuration)},
  { 356, 362, sizeof(::infoprotobuf::port_Analog)},
  { 363, 370, sizeof(::infoprotobuf::port)},
  { 372, 380, sizeof(::infoprotobuf::adjuster)},
  { 383, 396, sizeof(::infoprotobuf::driver)},
  { 404, 412, sizeof(::infoprotobuf::feature)},
  { 415, 422, sizeof(::infoprotobuf::device_DeviceInstance)},
  { 424, 430, sizeof(::infoprotobuf::device_Extension)},
  { 431, 443, sizeof(::infoprotobuf::device)},
  { 450, 458, sizeof(::infoprotobuf::slot_SlotOption)},
  { 461, 468, sizeof(::infoprotobuf::slot)},
  { 470, 479, sizeof(::infoprotobuf::softwarelist)},
  { 483, 491, sizeof(::infoprotobuf::ramoption)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_mame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_machine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_biosset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_rom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_disk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_hashes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_device_ref_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_chip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_sample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_display_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_sound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_input_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_dipswitch_DipLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_dipswitch_DipValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_dipswitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_configuration_ConfLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_configuration_ConfSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_port_Analog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_port_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_adjuster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_driver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_feature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_device_DeviceInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_device_Extension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_slot_SlotOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_slot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_softwarelist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::infoprotobuf::_ramoption_default_instance_),
};

const char descriptor_table_protodef_info_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ninfo.proto\022\014infoprotobuf\"g\n\004mame\022\r\n\005bu"
  "ild\030\001 \001(\t\022\024\n\005debug\030\002 \001(\010:\005false\022\022\n\nmamec"
  "onfig\030\003 \002(\r\022&\n\007machine\030\004 \003(\0132\025.infoproto"
  "buf.machine\"\353\007\n\007machine\022\014\n\004name\030\001 \002(\t\022\022\n"
  "\nsourcefile\030\002 \001(\t\022\025\n\006isbios\030\003 \001(\010:\005false"
  "\022\027\n\010isdevice\030\004 \001(\010:\005false\022\033\n\014ismechanica"
  "l\030\005 \001(\010:\005false\022\026\n\010runnable\030\006 \001(\010:\004true\022\017"
  "\n\007cloneof\030\007 \001(\t\022\r\n\005romof\030\010 \001(\t\022\020\n\010sample"
  "of\030\t \001(\t\022\023\n\013description\030\n \002(\t\022\014\n\004year\030\013 "
  "\001(\t\022\024\n\014manufacturer\030\014 \001(\t\022&\n\007biosset\030\r \003"
  "(\0132\025.infoprotobuf.biosset\022\036\n\003rom\030\016 \003(\0132\021"
  ".infoprotobuf.rom\022 \n\004disk\030\017 \003(\0132\022.infopr"
  "otobuf.disk\022,\n\ndevice_ref\030\020 \003(\0132\030.infopr"
  "otobuf.device_ref\022$\n\006sample\030\021 \003(\0132\024.info"
  "protobuf.sample\022 \n\004chip\030\022 \003(\0132\022.infoprot"
  "obuf.chip\022&\n\007display\030\023 \003(\0132\025.infoprotobu"
  "f.display\022\"\n\005sound\030\024 \001(\0132\023.infoprotobuf."
  "sound\022\"\n\005input\030\025 \001(\0132\023.infoprotobuf.inpu"
  "t\022*\n\tdipswitch\030\026 \003(\0132\027.infoprotobuf.dips"
  "witch\0222\n\rconfiguration\030\027 \003(\0132\033.infoproto"
  "buf.configuration\022 \n\004port\030\030 \003(\0132\022.infopr"
  "otobuf.port\022(\n\010adjuster\030\031 \003(\0132\026.infoprot"
  "obuf.adjuster\022$\n\006driver\030\032 \003(\0132\024.infoprot"
  "obuf.driver\022&\n\007feature\030\033 \003(\0132\025.infoproto"
  "buf.feature\022$\n\006device\030\034 \003(\0132\024.infoprotob"
  "uf.device\022 \n\004slot\030\035 \003(\0132\022.infoprotobuf.s"
  "lot\0220\n\014softwarelist\030\036 \003(\0132\032.infoprotobuf"
  ".softwarelist\022*\n\tramoption\030\037 \003(\0132\027.infop"
  "rotobuf.ramoption\"D\n\007biosset\022\014\n\004name\030\001 \002"
  "(\t\022\023\n\013description\030\002 \002(\t\022\026\n\007default\030\003 \001(\010"
  ":\005false\"\276\001\n\003rom\022\014\n\004name\030\001 \002(\t\022\014\n\004sha1\030\002 "
  "\001(\t\022\r\n\005merge\030\003 \001(\t\022\016\n\006region\030\004 \001(\t\022*\n\006st"
  "atus\030\005 \001(\0162\024.infoprotobuf.status:\004good\022\027"
  "\n\010optional\030\006 \001(\010:\005false\022\014\n\004bios\030\007 \001(\t\022\014\n"
  "\004size\030\010 \002(\r\022\013\n\003crc\030\t \001(\r\022\016\n\006offset\030\n \001(\t"
  "\"\274\001\n\004disk\022\014\n\004name\030\001 \002(\t\022\014\n\004sha1\030\002 \001(\t\022\r\n"
  "\005merge\030\003 \001(\t\022\016\n\006region\030\004 \001(\t\022*\n\006status\030\005"
  " \001(\0162\024.infoprotobuf.status:\004good\022\027\n\010opti"
  "onal\030\006 \001(\010:\005false\022\014\n\004size\030\007 \002(\r\022\r\n\005index"
  "\030\010 \001(\t\022\027\n\010writable\030\t \001(\010:\005false\"O\n\006hashe"
  "s\022\014\n\004sha1\030\001 \001(\t\022\013\n\003crc\030\002 \001(\r\022*\n\006status\030\003"
  " \001(\0162\024.infoprotobuf.status:\004good\"\032\n\ndevi"
  "ce_ref\022\014\n\004name\030\001 \002(\t\"W\n\004chip\022\014\n\004name\030\001 \002"
  "(\t\022\013\n\003tag\030\002 \001(\t\022%\n\004type\030\003 \002(\0162\027.infoprot"
  "obuf.chip_type\022\r\n\005clock\030\004 \001(\r\"\026\n\006sample\022"
  "\014\n\004name\030\001 \002(\t\"\250\002\n\007display\022\013\n\003tag\030\001 \001(\t\022("
  "\n\004type\030\002 \002(\0162\032.infoprotobuf.display_type"
  "\022.\n\006rotate\030\003 \001(\0162\036.infoprotobuf.display_"
  "rotation\022\024\n\005flipx\030\004 \001(\010:\005false\022\r\n\005width\030"
  "\005 \001(\r\022\016\n\006height\030\006 \001(\r\022\017\n\007refresh\030\007 \002(\001\022\020"
  "\n\010pixclock\030\010 \001(\005\022\016\n\006htotal\030\t \001(\005\022\r\n\005hben"
  "d\030\n \001(\005\022\017\n\007hbstart\030\013 \001(\005\022\016\n\006vtotal\030\014 \001(\005"
  "\022\r\n\005vbend\030\r \001(\005\022\017\n\007vbstart\030\016 \001(\005\"\031\n\005soun"
  "d\022\020\n\010channels\030\001 \002(\005\"\271\001\n\tcondition\022\013\n\003tag"
  "\030\001 \002(\t\022\014\n\004mask\030\002 \002(\r\022<\n\010relation\030\003 \002(\0162*"
  ".infoprotobuf.condition.condition_relati"
  "on\022\r\n\005value\030\004 \002(\r\"D\n\022condition_relation\022"
  "\006\n\002eq\020\001\022\006\n\002ne\020\002\022\006\n\002gt\020\003\022\006\n\002le\020\004\022\006\n\002lt\020\005\022"
  "\006\n\002ge\020\006\"\336\002\n\005input\022\026\n\007service\030\001 \001(\010:\005fals"
  "e\022\023\n\004tilt\030\002 \001(\010:\005false\022\017\n\007players\030\003 \002(\005\022"
  "\r\n\005coins\030\004 \001(\005\022,\n\007control\030\005 \003(\0132\033.infopr"
  "otobuf.input.Control\032\331\001\n\007Control\022\014\n\004type"
  "\030\001 \002(\t\022\016\n\006player\030\002 \001(\005\022\017\n\007buttons\030\003 \001(\005\022"
  "\022\n\nreqbuttons\030\004 \001(\005\022\017\n\007minimum\030\005 \001(\005\022\017\n\007"
  "maximum\030\006 \001(\005\022\023\n\013sensitivity\030\007 \001(\005\022\020\n\010ke"
  "ydelta\030\010 \001(\005\022\026\n\007reverse\030\t \001(\010:\005false\022\014\n\004"
  "ways\030\n \001(\t\022\r\n\005ways2\030\013 \001(\t\022\r\n\005ways3\030\014 \001(\t"
  "\"\201\003\n\tdipswitch\022\014\n\004name\030\001 \002(\t\022\013\n\003tag\030\002 \002("
  "\t\022\014\n\004mask\030\003 \002(\r\0228\n\013diplocation\030\004 \003(\0132#.i"
  "nfoprotobuf.dipswitch.DipLocation\022*\n\tcon"
  "dition\030\005 \001(\0132\027.infoprotobuf.condition\0222\n"
  "\010dipvalue\030\006 \003(\0132 .infoprotobuf.dipswitch"
  ".DipValue\032D\n\013DipLocation\022\014\n\004name\030\001 \002(\t\022\016"
  "\n\006number\030\002 \002(\r\022\027\n\010inverted\030\003 \001(\010:\005false\032"
  "k\n\010DipValue\022*\n\tcondition\030\001 \001(\0132\027.infopro"
  "tobuf.condition\022\014\n\004name\030\002 \002(\t\022\r\n\005value\030\003"
  " \002(\r\022\026\n\007default\030\004 \001(\010:\005false\"\231\003\n\rconfigu"
  "ration\022*\n\tcondition\030\001 \001(\0132\027.infoprotobuf"
  ".condition\022\014\n\004name\030\002 \002(\t\022\013\n\003tag\030\003 \002(\t\022\014\n"
  "\004mask\030\004 \002(\t\022>\n\014conflocation\030\005 \003(\0132(.info"
  "protobuf.configuration.ConfLocation\022<\n\013c"
  "onfsetting\030\006 \003(\0132\'.infoprotobuf.configur"
  "ation.ConfSetting\032E\n\014ConfLocation\022\014\n\004nam"
  "e\030\001 \002(\t\022\016\n\006number\030\002 \002(\r\022\027\n\010inverted\030\003 \001("
  "\010:\005false\032n\n\013ConfSetting\022*\n\tcondition\030\001 \001"
  "(\0132\027.infoprotobuf.condition\022\014\n\004name\030\002 \002("
  "\t\022\r\n\005value\030\003 \002(\t\022\026\n\007default\030\004 \001(\010:\005false"
  "\"V\n\004port\022\013\n\003tag\030\001 \002(\t\022)\n\006analog\030\002 \003(\0132\031."
  "infoprotobuf.port.Analog\032\026\n\006Analog\022\014\n\004ma"
  "sk\030\001 \002(\r\"U\n\010adjuster\022*\n\tcondition\030\001 \001(\0132"
  "\027.infoprotobuf.condition\022\014\n\004name\030\002 \002(\t\022\017"
  "\n\007default\030\003 \002(\r\"\271\003\n\006driver\0222\n\006status\030\001 \002"
  "(\0162\".infoprotobuf.driver.driver_status\0225"
  "\n\temulation\030\002 \002(\0162\".infoprotobuf.driver."
  "driver_status\0224\n\010cocktail\030\003 \001(\0162\".infopr"
  "otobuf.driver.driver_status\0221\n\tsavestate"
  "\030\004 \002(\0162\036.infoprotobuf.driver.Supported\022\035"
  "\n\016requireartwork\030\005 \001(\010:\005false\022\031\n\nunoffic"
  "ial\030\006 \001(\010:\005false\022\036\n\017nosoundhardware\030\007 \001("
  "\010:\005false\022\031\n\nincomplete\030\010 \001(\010:\005false\"9\n\rd"
  "river_status\022\010\n\004good\020\001\022\r\n\timperfect\020\002\022\017\n"
  "\013preliminary\020\003\"+\n\tSupported\022\r\n\tsupported"
  "\020\001\022\017\n\013unsupported\020\002\"\267\003\n\007feature\022\014\n\004type\030"
  "\001 \002(\t\0224\n\006status\030\002 \001(\0162$.infoprotobuf.fea"
  "ture.feature_status\0225\n\007overall\030\003 \001(\0162$.i"
  "nfoprotobuf.feature.feature_status\"\377\001\n\004T"
  "ype\022\016\n\nprotection\020\001\022\n\n\006timing\020\002\022\014\n\010graph"
  "ics\020\003\022\013\n\007palette\020\004\022\t\n\005sound\020\005\022\013\n\007capture"
  "\020\006\022\n\n\006camera\020\007\022\016\n\nmicrophone\020\010\022\014\n\010contro"
  "ls\020\t\022\014\n\010keyboard\020\n\022\t\n\005mouse\020\013\022\t\n\005media\020\014"
  "\022\010\n\004disk\020\r\022\013\n\007printer\020\016\022\010\n\004tape\020\017\022\t\n\005pun"
  "ch\020\020\022\010\n\004drum\020\021\022\007\n\003rom\020\022\022\t\n\005comms\020\023\022\007\n\003la"
  "n\020\024\022\007\n\003wan\020\025\"/\n\016feature_status\022\016\n\nunemul"
  "ated\020\001\022\r\n\timperfect\020\002\"\235\002\n\006device\022\014\n\004type"
  "\030\001 \002(\t\022\013\n\003tag\030\002 \001(\t\022\023\n\013fixed_image\030\003 \001(\t"
  "\022\021\n\tmandatory\030\004 \001(\t\022\021\n\tinterface\030\005 \001(\t\022<"
  "\n\017device_instance\030\006 \001(\0132#.infoprotobuf.d"
  "evice.DeviceInstance\0221\n\textension\030\007 \003(\0132"
  "\036.infoprotobuf.device.Extension\0321\n\016Devic"
  "eInstance\022\014\n\004name\030\001 \002(\t\022\021\n\tbriefname\030\002 \002"
  "(\t\032\031\n\tExtension\022\014\n\004name\030\001 \002(\t\"\214\001\n\004slot\022\014"
  "\n\004name\030\001 \002(\t\0221\n\nslotoption\030\002 \003(\0132\035.infop"
  "rotobuf.slot.SlotOption\032C\n\nSlotOption\022\014\n"
  "\004name\030\001 \002(\t\022\017\n\007devname\030\002 \002(\t\022\026\n\007default\030"
  "\003 \001(\010:\005false\"\225\001\n\014softwarelist\022\013\n\003tag\030\001 \002"
  "(\t\022\014\n\004name\030\002 \002(\t\0221\n\006status\030\003 \002(\0162!.infop"
  "rotobuf.softwarelist.Status\022\016\n\006filter\030\004 "
  "\001(\t\"\'\n\006Status\022\014\n\010original\020\000\022\017\n\013compatibi"
  "le\020\001\"9\n\tramoption\022\014\n\004name\030\001 \002(\t\022\017\n\007defau"
  "lt\030\002 \001(\010\022\r\n\005value\030\003 \001(\r*E\n\014display_type\022"
  "\n\n\006rastar\020\001\022\n\n\006vector\020\002\022\007\n\003lcd\020\003\022\007\n\003svg\020"
  "\004\022\013\n\007unknown\020\005*\?\n\020display_rotation\022\010\n\004de"
  "g0\020\001\022\t\n\005deg90\020\002\022\n\n\006deg180\020\003\022\n\n\006deg270\020\004*"
  "+\n\006status\022\013\n\007baddump\020\001\022\n\n\006nodump\020\002\022\010\n\004go"
  "od\020\003*\037\n\tchip_type\022\007\n\003cpu\020\001\022\t\n\005audio\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_info_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_info_2eproto_sccs[32] = {
  &scc_info_adjuster_info_2eproto.base,
  &scc_info_biosset_info_2eproto.base,
  &scc_info_chip_info_2eproto.base,
  &scc_info_condition_info_2eproto.base,
  &scc_info_configuration_info_2eproto.base,
  &scc_info_configuration_ConfLocation_info_2eproto.base,
  &scc_info_configuration_ConfSetting_info_2eproto.base,
  &scc_info_device_info_2eproto.base,
  &scc_info_device_DeviceInstance_info_2eproto.base,
  &scc_info_device_Extension_info_2eproto.base,
  &scc_info_device_ref_info_2eproto.base,
  &scc_info_dipswitch_info_2eproto.base,
  &scc_info_dipswitch_DipLocation_info_2eproto.base,
  &scc_info_dipswitch_DipValue_info_2eproto.base,
  &scc_info_disk_info_2eproto.base,
  &scc_info_display_info_2eproto.base,
  &scc_info_driver_info_2eproto.base,
  &scc_info_feature_info_2eproto.base,
  &scc_info_hashes_info_2eproto.base,
  &scc_info_input_info_2eproto.base,
  &scc_info_input_Control_info_2eproto.base,
  &scc_info_machine_info_2eproto.base,
  &scc_info_mame_info_2eproto.base,
  &scc_info_port_info_2eproto.base,
  &scc_info_port_Analog_info_2eproto.base,
  &scc_info_ramoption_info_2eproto.base,
  &scc_info_rom_info_2eproto.base,
  &scc_info_sample_info_2eproto.base,
  &scc_info_slot_info_2eproto.base,
  &scc_info_slot_SlotOption_info_2eproto.base,
  &scc_info_softwarelist_info_2eproto.base,
  &scc_info_sound_info_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_info_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_info_2eproto = {
  false, false, descriptor_table_protodef_info_2eproto, "info.proto", 5397,
  &descriptor_table_info_2eproto_once, descriptor_table_info_2eproto_sccs, descriptor_table_info_2eproto_deps, 32, 0,
  schemas, file_default_instances, TableStruct_info_2eproto::offsets,
  file_level_metadata_info_2eproto, 32, file_level_enum_descriptors_info_2eproto, file_level_service_descriptors_info_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_info_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_info_2eproto)), true);
namespace infoprotobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* condition_condition_relation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[0];
}
bool condition_condition_relation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr condition_condition_relation condition::eq;
constexpr condition_condition_relation condition::ne;
constexpr condition_condition_relation condition::gt;
constexpr condition_condition_relation condition::le;
constexpr condition_condition_relation condition::lt;
constexpr condition_condition_relation condition::ge;
constexpr condition_condition_relation condition::condition_relation_MIN;
constexpr condition_condition_relation condition::condition_relation_MAX;
constexpr int condition::condition_relation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* driver_driver_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[1];
}
bool driver_driver_status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr driver_driver_status driver::good;
constexpr driver_driver_status driver::imperfect;
constexpr driver_driver_status driver::preliminary;
constexpr driver_driver_status driver::driver_status_MIN;
constexpr driver_driver_status driver::driver_status_MAX;
constexpr int driver::driver_status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* driver_Supported_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[2];
}
bool driver_Supported_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr driver_Supported driver::supported;
constexpr driver_Supported driver::unsupported;
constexpr driver_Supported driver::Supported_MIN;
constexpr driver_Supported driver::Supported_MAX;
constexpr int driver::Supported_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* feature_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[3];
}
bool feature_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr feature_Type feature::protection;
constexpr feature_Type feature::timing;
constexpr feature_Type feature::graphics;
constexpr feature_Type feature::palette;
constexpr feature_Type feature::sound;
constexpr feature_Type feature::capture;
constexpr feature_Type feature::camera;
constexpr feature_Type feature::microphone;
constexpr feature_Type feature::controls;
constexpr feature_Type feature::keyboard;
constexpr feature_Type feature::mouse;
constexpr feature_Type feature::media;
constexpr feature_Type feature::disk;
constexpr feature_Type feature::printer;
constexpr feature_Type feature::tape;
constexpr feature_Type feature::punch;
constexpr feature_Type feature::drum;
constexpr feature_Type feature::rom;
constexpr feature_Type feature::comms;
constexpr feature_Type feature::lan;
constexpr feature_Type feature::wan;
constexpr feature_Type feature::Type_MIN;
constexpr feature_Type feature::Type_MAX;
constexpr int feature::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* feature_feature_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[4];
}
bool feature_feature_status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr feature_feature_status feature::unemulated;
constexpr feature_feature_status feature::imperfect;
constexpr feature_feature_status feature::feature_status_MIN;
constexpr feature_feature_status feature::feature_status_MAX;
constexpr int feature::feature_status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* softwarelist_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[5];
}
bool softwarelist_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr softwarelist_Status softwarelist::original;
constexpr softwarelist_Status softwarelist::compatibile;
constexpr softwarelist_Status softwarelist::Status_MIN;
constexpr softwarelist_Status softwarelist::Status_MAX;
constexpr int softwarelist::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* display_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[6];
}
bool display_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* display_rotation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[7];
}
bool display_rotation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[8];
}
bool status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* chip_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_info_2eproto);
  return file_level_enum_descriptors_info_2eproto[9];
}
bool chip_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void mame::InitAsDefaultInstance() {
}
class mame::_Internal {
 public:
  using HasBits = decltype(std::declval<mame>()._has_bits_);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mameconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

mame::mame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  machine_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.mame)
}
mame::mame(const mame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      machine_(from.machine_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_build()) {
    build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_build(),
      GetArena());
  }
  ::memcpy(&debug_, &from.debug_,
    static_cast<size_t>(reinterpret_cast<char*>(&mameconfig_) -
    reinterpret_cast<char*>(&debug_)) + sizeof(mameconfig_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.mame)
}

void mame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mame_info_2eproto.base);
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&debug_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mameconfig_) -
      reinterpret_cast<char*>(&debug_)) + sizeof(mameconfig_));
}

mame::~mame() {
  // @@protoc_insertion_point(destructor:infoprotobuf.mame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mame::ArenaDtor(void* object) {
  mame* _this = reinterpret_cast< mame* >(object);
  (void)_this;
}
void mame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mame& mame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mame_info_2eproto.base);
  return *internal_default_instance();
}


void mame::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.mame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    build_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&debug_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mameconfig_) -
        reinterpret_cast<char*>(&debug_)) + sizeof(mameconfig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string build = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.mame.build");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_debug(&has_bits);
          debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mameconfig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mameconfig(&has_bits);
          mameconfig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.machine machine = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_machine(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.mame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string build = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.mame.build");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_build(), target);
  }

  // optional bool debug = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_debug(), target);
  }

  // required uint32 mameconfig = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mameconfig(), target);
  }

  // repeated .infoprotobuf.machine machine = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_machine_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_machine(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.mame)
  return target;
}

size_t mame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.mame)
  size_t total_size = 0;

  // required uint32 mameconfig = 3;
  if (_internal_has_mameconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mameconfig());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infoprotobuf.machine machine = 4;
  total_size += 1UL * this->_internal_machine_size();
  for (const auto& msg : this->machine_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string build = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_build());
    }

    // optional bool debug = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.mame)
  GOOGLE_DCHECK_NE(&from, this);
  const mame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.mame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.mame)
    MergeFrom(*source);
  }
}

void mame::MergeFrom(const mame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.mame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  machine_.MergeFrom(from.machine_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_build(from._internal_build());
    }
    if (cached_has_bits & 0x00000002u) {
      debug_ = from.debug_;
    }
    if (cached_has_bits & 0x00000004u) {
      mameconfig_ = from.mameconfig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.mame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mame::CopyFrom(const mame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.mame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(machine_)) return false;
  return true;
}

void mame::InternalSwap(mame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  machine_.InternalSwap(&other->machine_);
  build_.Swap(&other->build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mame, mameconfig_)
      + sizeof(mame::mameconfig_)
      - PROTOBUF_FIELD_OFFSET(mame, debug_)>(
          reinterpret_cast<char*>(&debug_),
          reinterpret_cast<char*>(&other->debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void machine::InitAsDefaultInstance() {
  ::infoprotobuf::_machine_default_instance_._instance.get_mutable()->sound_ = const_cast< ::infoprotobuf::sound*>(
      ::infoprotobuf::sound::internal_default_instance());
  ::infoprotobuf::_machine_default_instance_._instance.get_mutable()->input_ = const_cast< ::infoprotobuf::input*>(
      ::infoprotobuf::input::internal_default_instance());
}
class machine::_Internal {
 public:
  using HasBits = decltype(std::declval<machine>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sourcefile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isbios(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_isdevice(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ismechanical(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_runnable(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_cloneof(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_romof(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sampleof(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::infoprotobuf::sound& sound(const machine* msg);
  static void set_has_sound(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::infoprotobuf::input& input(const machine* msg);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000021) ^ 0x00000021) != 0;
  }
};

const ::infoprotobuf::sound&
machine::_Internal::sound(const machine* msg) {
  return *msg->sound_;
}
const ::infoprotobuf::input&
machine::_Internal::input(const machine* msg) {
  return *msg->input_;
}
machine::machine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  biosset_(arena),
  rom_(arena),
  disk_(arena),
  device_ref_(arena),
  sample_(arena),
  chip_(arena),
  display_(arena),
  dipswitch_(arena),
  configuration_(arena),
  port_(arena),
  adjuster_(arena),
  driver_(arena),
  feature_(arena),
  device_(arena),
  slot_(arena),
  softwarelist_(arena),
  ramoption_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.machine)
}
machine::machine(const machine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      biosset_(from.biosset_),
      rom_(from.rom_),
      disk_(from.disk_),
      device_ref_(from.device_ref_),
      sample_(from.sample_),
      chip_(from.chip_),
      display_(from.display_),
      dipswitch_(from.dipswitch_),
      configuration_(from.configuration_),
      port_(from.port_),
      adjuster_(from.adjuster_),
      driver_(from.driver_),
      feature_(from.feature_),
      device_(from.device_),
      slot_(from.slot_),
      softwarelist_(from.softwarelist_),
      ramoption_(from.ramoption_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  sourcefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourcefile()) {
    sourcefile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sourcefile(),
      GetArena());
  }
  cloneof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cloneof()) {
    cloneof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cloneof(),
      GetArena());
  }
  romof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_romof()) {
    romof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_romof(),
      GetArena());
  }
  sampleof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sampleof()) {
    sampleof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sampleof(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_year()) {
    year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_year(),
      GetArena());
  }
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_manufacturer()) {
    manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_manufacturer(),
      GetArena());
  }
  if (from._internal_has_sound()) {
    sound_ = new ::infoprotobuf::sound(*from.sound_);
  } else {
    sound_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::infoprotobuf::input(*from.input_);
  } else {
    input_ = nullptr;
  }
  ::memcpy(&isbios_, &from.isbios_,
    static_cast<size_t>(reinterpret_cast<char*>(&runnable_) -
    reinterpret_cast<char*>(&isbios_)) + sizeof(runnable_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.machine)
}

void machine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_machine_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloneof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  romof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sampleof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ismechanical_) -
      reinterpret_cast<char*>(&sound_)) + sizeof(ismechanical_));
  runnable_ = true;
}

machine::~machine() {
  // @@protoc_insertion_point(destructor:infoprotobuf.machine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void machine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcefile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloneof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  romof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sampleof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sound_;
  if (this != internal_default_instance()) delete input_;
}

void machine::ArenaDtor(void* object) {
  machine* _this = reinterpret_cast< machine* >(object);
  (void)_this;
}
void machine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void machine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const machine& machine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_machine_info_2eproto.base);
  return *internal_default_instance();
}


void machine::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.machine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  biosset_.Clear();
  rom_.Clear();
  disk_.Clear();
  device_ref_.Clear();
  sample_.Clear();
  chip_.Clear();
  display_.Clear();
  dipswitch_.Clear();
  configuration_.Clear();
  port_.Clear();
  adjuster_.Clear();
  driver_.Clear();
  feature_.Clear();
  device_.Clear();
  slot_.Clear();
  softwarelist_.Clear();
  ramoption_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sourcefile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      cloneof_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      romof_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      sampleof_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      year_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      manufacturer_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(sound_ != nullptr);
      sound_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(input_ != nullptr);
      input_->Clear();
    }
  }
  ::memset(&isbios_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ismechanical_) -
      reinterpret_cast<char*>(&isbios_)) + sizeof(ismechanical_));
  runnable_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* machine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.machine.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sourcefile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sourcefile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.machine.sourcefile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isbios = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isbios(&has_bits);
          isbios_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isdevice = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_isdevice(&has_bits);
          isdevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ismechanical = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ismechanical(&has_bits);
          ismechanical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool runnable = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_runnable(&has_bits);
          runnable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cloneof = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_cloneof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.machine.cloneof");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string romof = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_romof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.machine.romof");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sampleof = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sampleof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.machine.sampleof");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.machine.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string year = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_year();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.machine.year");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string manufacturer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.machine.manufacturer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.biosset biosset = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_biosset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.rom rom = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.disk disk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.device_ref device_ref = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_device_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.sample sample = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.chip chip = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.display display = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_display(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.sound sound = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_sound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.input input = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.dipswitch dipswitch = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dipswitch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.configuration configuration = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.port port = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.adjuster adjuster = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_adjuster(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.driver driver = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_driver(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.feature feature = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.device device = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.slot slot = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_slot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.softwarelist softwarelist = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_softwarelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.ramoption ramoption = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ramoption(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* machine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.machine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.machine.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string sourcefile = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourcefile().data(), static_cast<int>(this->_internal_sourcefile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.machine.sourcefile");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sourcefile(), target);
  }

  // optional bool isbios = 3 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isbios(), target);
  }

  // optional bool isdevice = 4 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isdevice(), target);
  }

  // optional bool ismechanical = 5 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ismechanical(), target);
  }

  // optional bool runnable = 6 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_runnable(), target);
  }

  // optional string cloneof = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cloneof().data(), static_cast<int>(this->_internal_cloneof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.machine.cloneof");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_cloneof(), target);
  }

  // optional string romof = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_romof().data(), static_cast<int>(this->_internal_romof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.machine.romof");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_romof(), target);
  }

  // optional string sampleof = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sampleof().data(), static_cast<int>(this->_internal_sampleof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.machine.sampleof");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sampleof(), target);
  }

  // required string description = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.machine.description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_description(), target);
  }

  // optional string year = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_year().data(), static_cast<int>(this->_internal_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.machine.year");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_year(), target);
  }

  // optional string manufacturer = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.machine.manufacturer");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_manufacturer(), target);
  }

  // repeated .infoprotobuf.biosset biosset = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_biosset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_biosset(i), target, stream);
  }

  // repeated .infoprotobuf.rom rom = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_rom(i), target, stream);
  }

  // repeated .infoprotobuf.disk disk = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disk_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_disk(i), target, stream);
  }

  // repeated .infoprotobuf.device_ref device_ref = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_device_ref(i), target, stream);
  }

  // repeated .infoprotobuf.sample sample = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sample_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_sample(i), target, stream);
  }

  // repeated .infoprotobuf.chip chip = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_chip(i), target, stream);
  }

  // repeated .infoprotobuf.display display = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_display(i), target, stream);
  }

  // optional .infoprotobuf.sound sound = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::sound(this), target, stream);
  }

  // optional .infoprotobuf.input input = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::input(this), target, stream);
  }

  // repeated .infoprotobuf.dipswitch dipswitch = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dipswitch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_dipswitch(i), target, stream);
  }

  // repeated .infoprotobuf.configuration configuration = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configuration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_configuration(i), target, stream);
  }

  // repeated .infoprotobuf.port port = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_port_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_port(i), target, stream);
  }

  // repeated .infoprotobuf.adjuster adjuster = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adjuster_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_adjuster(i), target, stream);
  }

  // repeated .infoprotobuf.driver driver = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_driver_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_driver(i), target, stream);
  }

  // repeated .infoprotobuf.feature feature = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_feature(i), target, stream);
  }

  // repeated .infoprotobuf.device device = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_device(i), target, stream);
  }

  // repeated .infoprotobuf.slot slot = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_slot(i), target, stream);
  }

  // repeated .infoprotobuf.softwarelist softwarelist = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_softwarelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_softwarelist(i), target, stream);
  }

  // repeated .infoprotobuf.ramoption ramoption = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ramoption_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_ramoption(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.machine)
  return target;
}

size_t machine::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.machine)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_description()) {
    // required string description = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return total_size;
}
size_t machine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.machine)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string description = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infoprotobuf.biosset biosset = 13;
  total_size += 1UL * this->_internal_biosset_size();
  for (const auto& msg : this->biosset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.rom rom = 14;
  total_size += 1UL * this->_internal_rom_size();
  for (const auto& msg : this->rom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.disk disk = 15;
  total_size += 1UL * this->_internal_disk_size();
  for (const auto& msg : this->disk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.device_ref device_ref = 16;
  total_size += 2UL * this->_internal_device_ref_size();
  for (const auto& msg : this->device_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.sample sample = 17;
  total_size += 2UL * this->_internal_sample_size();
  for (const auto& msg : this->sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.chip chip = 18;
  total_size += 2UL * this->_internal_chip_size();
  for (const auto& msg : this->chip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.display display = 19;
  total_size += 2UL * this->_internal_display_size();
  for (const auto& msg : this->display_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.dipswitch dipswitch = 22;
  total_size += 2UL * this->_internal_dipswitch_size();
  for (const auto& msg : this->dipswitch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.configuration configuration = 23;
  total_size += 2UL * this->_internal_configuration_size();
  for (const auto& msg : this->configuration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.port port = 24;
  total_size += 2UL * this->_internal_port_size();
  for (const auto& msg : this->port_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.adjuster adjuster = 25;
  total_size += 2UL * this->_internal_adjuster_size();
  for (const auto& msg : this->adjuster_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.driver driver = 26;
  total_size += 2UL * this->_internal_driver_size();
  for (const auto& msg : this->driver_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.feature feature = 27;
  total_size += 2UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.device device = 28;
  total_size += 2UL * this->_internal_device_size();
  for (const auto& msg : this->device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.slot slot = 29;
  total_size += 2UL * this->_internal_slot_size();
  for (const auto& msg : this->slot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.softwarelist softwarelist = 30;
  total_size += 2UL * this->_internal_softwarelist_size();
  for (const auto& msg : this->softwarelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.ramoption ramoption = 31;
  total_size += 2UL * this->_internal_ramoption_size();
  for (const auto& msg : this->ramoption_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string sourcefile = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourcefile());
    }

    // optional string cloneof = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cloneof());
    }

    // optional string romof = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_romof());
    }

    // optional string sampleof = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sampleof());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional string year = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_year());
    }

    // optional string manufacturer = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manufacturer());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .infoprotobuf.sound sound = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sound_);
    }

    // optional .infoprotobuf.input input = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_);
    }

    // optional bool isbios = 3 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool isdevice = 4 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool ismechanical = 5 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool runnable = 6 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void machine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.machine)
  GOOGLE_DCHECK_NE(&from, this);
  const machine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<machine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.machine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.machine)
    MergeFrom(*source);
  }
}

void machine::MergeFrom(const machine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.machine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  biosset_.MergeFrom(from.biosset_);
  rom_.MergeFrom(from.rom_);
  disk_.MergeFrom(from.disk_);
  device_ref_.MergeFrom(from.device_ref_);
  sample_.MergeFrom(from.sample_);
  chip_.MergeFrom(from.chip_);
  display_.MergeFrom(from.display_);
  dipswitch_.MergeFrom(from.dipswitch_);
  configuration_.MergeFrom(from.configuration_);
  port_.MergeFrom(from.port_);
  adjuster_.MergeFrom(from.adjuster_);
  driver_.MergeFrom(from.driver_);
  feature_.MergeFrom(from.feature_);
  device_.MergeFrom(from.device_);
  slot_.MergeFrom(from.slot_);
  softwarelist_.MergeFrom(from.softwarelist_);
  ramoption_.MergeFrom(from.ramoption_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sourcefile(from._internal_sourcefile());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cloneof(from._internal_cloneof());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_romof(from._internal_romof());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_sampleof(from._internal_sampleof());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_year(from._internal_year());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_manufacturer(from._internal_manufacturer());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_sound()->::infoprotobuf::sound::MergeFrom(from._internal_sound());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_input()->::infoprotobuf::input::MergeFrom(from._internal_input());
    }
    if (cached_has_bits & 0x00000400u) {
      isbios_ = from.isbios_;
    }
    if (cached_has_bits & 0x00000800u) {
      isdevice_ = from.isdevice_;
    }
    if (cached_has_bits & 0x00001000u) {
      ismechanical_ = from.ismechanical_;
    }
    if (cached_has_bits & 0x00002000u) {
      runnable_ = from.runnable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void machine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void machine::CopyFrom(const machine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool machine::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(biosset_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rom_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(disk_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(device_ref_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sample_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(chip_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(display_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dipswitch_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(configuration_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(port_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(adjuster_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(driver_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(feature_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(device_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slot_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(softwarelist_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ramoption_)) return false;
  if (_internal_has_sound()) {
    if (!sound_->IsInitialized()) return false;
  }
  if (_internal_has_input()) {
    if (!input_->IsInitialized()) return false;
  }
  return true;
}

void machine::InternalSwap(machine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  biosset_.InternalSwap(&other->biosset_);
  rom_.InternalSwap(&other->rom_);
  disk_.InternalSwap(&other->disk_);
  device_ref_.InternalSwap(&other->device_ref_);
  sample_.InternalSwap(&other->sample_);
  chip_.InternalSwap(&other->chip_);
  display_.InternalSwap(&other->display_);
  dipswitch_.InternalSwap(&other->dipswitch_);
  configuration_.InternalSwap(&other->configuration_);
  port_.InternalSwap(&other->port_);
  adjuster_.InternalSwap(&other->adjuster_);
  driver_.InternalSwap(&other->driver_);
  feature_.InternalSwap(&other->feature_);
  device_.InternalSwap(&other->device_);
  slot_.InternalSwap(&other->slot_);
  softwarelist_.InternalSwap(&other->softwarelist_);
  ramoption_.InternalSwap(&other->ramoption_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sourcefile_.Swap(&other->sourcefile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloneof_.Swap(&other->cloneof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  romof_.Swap(&other->romof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sampleof_.Swap(&other->sampleof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  year_.Swap(&other->year_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(machine, ismechanical_)
      + sizeof(machine::ismechanical_)
      - PROTOBUF_FIELD_OFFSET(machine, sound_)>(
          reinterpret_cast<char*>(&sound_),
          reinterpret_cast<char*>(&other->sound_));
  swap(runnable_, other->runnable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata machine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void biosset::InitAsDefaultInstance() {
}
class biosset::_Internal {
 public:
  using HasBits = decltype(std::declval<biosset>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

biosset::biosset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.biosset)
}
biosset::biosset(const biosset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  default__ = from.default__;
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.biosset)
}

void biosset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_biosset_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default__ = false;
}

biosset::~biosset() {
  // @@protoc_insertion_point(destructor:infoprotobuf.biosset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void biosset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void biosset::ArenaDtor(void* object) {
  biosset* _this = reinterpret_cast< biosset* >(object);
  (void)_this;
}
void biosset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void biosset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const biosset& biosset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_biosset_info_2eproto.base);
  return *internal_default_instance();
}


void biosset::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.biosset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  default__ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* biosset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.biosset.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.biosset.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_default_(&has_bits);
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* biosset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.biosset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.biosset.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.biosset.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional bool default = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.biosset)
  return target;
}

size_t biosset::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.biosset)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_description()) {
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return total_size;
}
size_t biosset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.biosset)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool default = 3 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void biosset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.biosset)
  GOOGLE_DCHECK_NE(&from, this);
  const biosset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<biosset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.biosset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.biosset)
    MergeFrom(*source);
  }
}

void biosset::MergeFrom(const biosset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.biosset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      default__ = from.default__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void biosset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.biosset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void biosset::CopyFrom(const biosset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.biosset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool biosset::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void biosset::InternalSwap(biosset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(default__, other->default__);
}

::PROTOBUF_NAMESPACE_ID::Metadata biosset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rom::InitAsDefaultInstance() {
}
class rom::_Internal {
 public:
  using HasBits = decltype(std::declval<rom>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_merge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_optional(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bios(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000081) ^ 0x00000081) != 0;
  }
};

rom::rom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.rom)
}
rom::rom(const rom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha1()) {
    sha1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sha1(),
      GetArena());
  }
  merge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_merge()) {
    merge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_merge(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_region()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  bios_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bios()) {
    bios_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bios(),
      GetArena());
  }
  offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_offset()) {
    offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offset(),
      GetArena());
  }
  ::memcpy(&optional_, &from.optional_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&optional_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.rom)
}

void rom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rom_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bios_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crc_) -
      reinterpret_cast<char*>(&optional_)) + sizeof(crc_));
  status_ = 3;
}

rom::~rom() {
  // @@protoc_insertion_point(destructor:infoprotobuf.rom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bios_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void rom::ArenaDtor(void* object) {
  rom* _this = reinterpret_cast< rom* >(object);
  (void)_this;
}
void rom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rom& rom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rom_info_2eproto.base);
  return *internal_default_instance();
}


void rom::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.rom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      merge_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      region_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      bios_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      offset_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&optional_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&optional_)) + sizeof(size_));
  }
  if (cached_has_bits & 0x00000300u) {
    crc_ = 0u;
    status_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.rom.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sha1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.rom.sha1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string merge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_merge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.rom.merge");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.rom.region");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.status status = 5 [default = good];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::status_IsValid(val))) {
            _internal_set_status(static_cast<::infoprotobuf::status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool optional = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_optional(&has_bits);
          optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bios = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_bios();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.rom.bios");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_offset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.rom.offset");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.rom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.rom.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string sha1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sha1().data(), static_cast<int>(this->_internal_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.rom.sha1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sha1(), target);
  }

  // optional string merge = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_merge().data(), static_cast<int>(this->_internal_merge().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.rom.merge");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_merge(), target);
  }

  // optional string region = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.rom.region");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_region(), target);
  }

  // optional .infoprotobuf.status status = 5 [default = good];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // optional bool optional = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_optional(), target);
  }

  // optional string bios = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bios().data(), static_cast<int>(this->_internal_bios().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.rom.bios");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bios(), target);
  }

  // required uint32 size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_size(), target);
  }

  // optional uint32 crc = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_crc(), target);
  }

  // optional string offset = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_offset().data(), static_cast<int>(this->_internal_offset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.rom.offset");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.rom)
  return target;
}

size_t rom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.rom)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_size()) {
    // required uint32 size = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  return total_size;
}
size_t rom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.rom)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000081) ^ 0x00000081) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 size = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional string sha1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sha1());
    }

    // optional string merge = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_merge());
    }

    // optional string region = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region());
    }

    // optional string bios = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bios());
    }

    // optional string offset = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_offset());
    }

    // optional bool optional = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 crc = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc());
    }

    // optional .infoprotobuf.status status = 5 [default = good];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.rom)
  GOOGLE_DCHECK_NE(&from, this);
  const rom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.rom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.rom)
    MergeFrom(*source);
  }
}

void rom::MergeFrom(const rom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.rom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha1(from._internal_sha1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_merge(from._internal_merge());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_region(from._internal_region());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_bios(from._internal_bios());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_offset(from._internal_offset());
    }
    if (cached_has_bits & 0x00000040u) {
      optional_ = from.optional_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000200u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.rom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rom::CopyFrom(const rom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.rom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rom::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void rom::InternalSwap(rom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sha1_.Swap(&other->sha1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  merge_.Swap(&other->merge_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bios_.Swap(&other->bios_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_.Swap(&other->offset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rom, crc_)
      + sizeof(rom::crc_)
      - PROTOBUF_FIELD_OFFSET(rom, optional_)>(
          reinterpret_cast<char*>(&optional_),
          reinterpret_cast<char*>(&other->optional_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void disk::InitAsDefaultInstance() {
}
class disk::_Internal {
 public:
  using HasBits = decltype(std::declval<disk>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_merge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optional(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_writable(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000021) ^ 0x00000021) != 0;
  }
};

disk::disk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.disk)
}
disk::disk(const disk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha1()) {
    sha1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sha1(),
      GetArena());
  }
  merge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_merge()) {
    merge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_merge(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_region()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_index()) {
    index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index(),
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&size_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.disk)
}

void disk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_disk_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writable_) -
      reinterpret_cast<char*>(&size_)) + sizeof(writable_));
  status_ = 3;
}

disk::~disk() {
  // @@protoc_insertion_point(destructor:infoprotobuf.disk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void disk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void disk::ArenaDtor(void* object) {
  disk* _this = reinterpret_cast< disk* >(object);
  (void)_this;
}
void disk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void disk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const disk& disk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_disk_info_2eproto.base);
  return *internal_default_instance();
}


void disk::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.disk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      merge_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      region_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      index_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&writable_) -
        reinterpret_cast<char*>(&size_)) + sizeof(writable_));
  }
  status_ = 3;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* disk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.disk.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sha1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.disk.sha1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string merge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_merge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.disk.merge");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.disk.region");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.status status = 5 [default = good];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::status_IsValid(val))) {
            _internal_set_status(static_cast<::infoprotobuf::status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool optional = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_optional(&has_bits);
          optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.disk.index");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool writable = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_writable(&has_bits);
          writable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* disk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.disk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.disk.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string sha1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sha1().data(), static_cast<int>(this->_internal_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.disk.sha1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sha1(), target);
  }

  // optional string merge = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_merge().data(), static_cast<int>(this->_internal_merge().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.disk.merge");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_merge(), target);
  }

  // optional string region = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.disk.region");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_region(), target);
  }

  // optional .infoprotobuf.status status = 5 [default = good];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // optional bool optional = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_optional(), target);
  }

  // required uint32 size = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_size(), target);
  }

  // optional string index = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.disk.index");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_index(), target);
  }

  // optional bool writable = 9 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_writable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.disk)
  return target;
}

size_t disk::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.disk)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_size()) {
    // required uint32 size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  return total_size;
}
size_t disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.disk)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string sha1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sha1());
    }

    // optional string merge = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_merge());
    }

    // optional string region = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region());
    }

    // optional string index = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_index());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional bool optional = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool writable = 9 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional .infoprotobuf.status status = 5 [default = good];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void disk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.disk)
  GOOGLE_DCHECK_NE(&from, this);
  const disk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<disk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.disk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.disk)
    MergeFrom(*source);
  }
}

void disk::MergeFrom(const disk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.disk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha1(from._internal_sha1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_merge(from._internal_merge());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_region(from._internal_region());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_index(from._internal_index());
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000040u) {
      optional_ = from.optional_;
    }
    if (cached_has_bits & 0x00000080u) {
      writable_ = from.writable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_status(from._internal_status());
  }
}

void disk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void disk::CopyFrom(const disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool disk::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void disk::InternalSwap(disk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sha1_.Swap(&other->sha1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  merge_.Swap(&other->merge_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(disk, writable_)
      + sizeof(disk::writable_)
      - PROTOBUF_FIELD_OFFSET(disk, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata disk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void hashes::InitAsDefaultInstance() {
}
class hashes::_Internal {
 public:
  using HasBits = decltype(std::declval<hashes>()._has_bits_);
  static void set_has_sha1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

hashes::hashes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.hashes)
}
hashes::hashes(const hashes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha1()) {
    sha1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sha1(),
      GetArena());
  }
  ::memcpy(&crc_, &from.crc_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&crc_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.hashes)
}

void hashes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hashes_info_2eproto.base);
  sha1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crc_ = 0u;
  status_ = 3;
}

hashes::~hashes() {
  // @@protoc_insertion_point(destructor:infoprotobuf.hashes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hashes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sha1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void hashes::ArenaDtor(void* object) {
  hashes* _this = reinterpret_cast< hashes* >(object);
  (void)_this;
}
void hashes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hashes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hashes& hashes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hashes_info_2eproto.base);
  return *internal_default_instance();
}


void hashes::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.hashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha1_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    crc_ = 0u;
    status_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hashes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sha1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sha1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.hashes.sha1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.status status = 3 [default = good];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::status_IsValid(val))) {
            _internal_set_status(static_cast<::infoprotobuf::status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hashes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.hashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sha1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sha1().data(), static_cast<int>(this->_internal_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.hashes.sha1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sha1(), target);
  }

  // optional uint32 crc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_crc(), target);
  }

  // optional .infoprotobuf.status status = 3 [default = good];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.hashes)
  return target;
}

size_t hashes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.hashes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sha1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sha1());
    }

    // optional uint32 crc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crc());
    }

    // optional .infoprotobuf.status status = 3 [default = good];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hashes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.hashes)
  GOOGLE_DCHECK_NE(&from, this);
  const hashes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hashes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.hashes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.hashes)
    MergeFrom(*source);
  }
}

void hashes::MergeFrom(const hashes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.hashes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha1(from._internal_sha1());
    }
    if (cached_has_bits & 0x00000002u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void hashes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.hashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hashes::CopyFrom(const hashes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.hashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hashes::IsInitialized() const {
  return true;
}

void hashes::InternalSwap(hashes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha1_.Swap(&other->sha1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(crc_, other->crc_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata hashes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void device_ref::InitAsDefaultInstance() {
}
class device_ref::_Internal {
 public:
  using HasBits = decltype(std::declval<device_ref>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

device_ref::device_ref(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.device_ref)
}
device_ref::device_ref(const device_ref& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.device_ref)
}

void device_ref::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_device_ref_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

device_ref::~device_ref() {
  // @@protoc_insertion_point(destructor:infoprotobuf.device_ref)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void device_ref::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void device_ref::ArenaDtor(void* object) {
  device_ref* _this = reinterpret_cast< device_ref* >(object);
  (void)_this;
}
void device_ref::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void device_ref::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const device_ref& device_ref::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_device_ref_info_2eproto.base);
  return *internal_default_instance();
}


void device_ref::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.device_ref)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* device_ref::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device_ref.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* device_ref::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.device_ref)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device_ref.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.device_ref)
  return target;
}

size_t device_ref::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.device_ref)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void device_ref::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.device_ref)
  GOOGLE_DCHECK_NE(&from, this);
  const device_ref* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<device_ref>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.device_ref)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.device_ref)
    MergeFrom(*source);
  }
}

void device_ref::MergeFrom(const device_ref& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.device_ref)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void device_ref::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.device_ref)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_ref::CopyFrom(const device_ref& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.device_ref)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device_ref::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void device_ref::InternalSwap(device_ref* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata device_ref::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void chip::InitAsDefaultInstance() {
}
class chip::_Internal {
 public:
  using HasBits = decltype(std::declval<chip>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

chip::chip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.chip)
}
chip::chip(const chip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  ::memcpy(&clock_, &from.clock_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&clock_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.chip)
}

void chip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chip_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clock_ = 0u;
  type_ = 1;
}

chip::~chip() {
  // @@protoc_insertion_point(destructor:infoprotobuf.chip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void chip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void chip::ArenaDtor(void* object) {
  chip* _this = reinterpret_cast< chip* >(object);
  (void)_this;
}
void chip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void chip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const chip& chip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chip_info_2eproto.base);
  return *internal_default_instance();
}


void chip::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.chip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    clock_ = 0u;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.chip.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.chip.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .infoprotobuf.chip_type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::chip_type_IsValid(val))) {
            _internal_set_type(static_cast<::infoprotobuf::chip_type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 clock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clock(&has_bits);
          clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.chip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.chip.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.chip.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // required .infoprotobuf.chip_type type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional uint32 clock = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.chip)
  return target;
}

size_t chip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.chip)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_type()) {
    // required .infoprotobuf.chip_type type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t chip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.chip)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .infoprotobuf.chip_type type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional uint32 clock = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_clock());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void chip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.chip)
  GOOGLE_DCHECK_NE(&from, this);
  const chip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.chip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.chip)
    MergeFrom(*source);
  }
}

void chip::MergeFrom(const chip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.chip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      clock_ = from.clock_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void chip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.chip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chip::CopyFrom(const chip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.chip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chip::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void chip::InternalSwap(chip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(clock_, other->clock_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata chip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sample::InitAsDefaultInstance() {
}
class sample::_Internal {
 public:
  using HasBits = decltype(std::declval<sample>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

sample::sample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.sample)
}
sample::sample(const sample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.sample)
}

void sample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sample_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

sample::~sample() {
  // @@protoc_insertion_point(destructor:infoprotobuf.sample)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sample::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sample::ArenaDtor(void* object) {
  sample* _this = reinterpret_cast< sample* >(object);
  (void)_this;
}
void sample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sample& sample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sample_info_2eproto.base);
  return *internal_default_instance();
}


void sample::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.sample.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.sample.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.sample)
  return target;
}

size_t sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.sample)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.sample)
  GOOGLE_DCHECK_NE(&from, this);
  const sample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.sample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.sample)
    MergeFrom(*source);
  }
}

void sample::MergeFrom(const sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void sample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sample::CopyFrom(const sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sample::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void sample::InternalSwap(sample* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata sample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void display::InitAsDefaultInstance() {
}
class display::_Internal {
 public:
  using HasBits = decltype(std::declval<display>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rotate(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_flipx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_refresh(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pixclock(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_htotal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hbend(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hbstart(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vtotal(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vbend(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vbstart(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001008) ^ 0x00001008) != 0;
  }
};

display::display(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.display)
}
display::display(const display& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  ::memcpy(&flipx_, &from.flipx_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotate_) -
    reinterpret_cast<char*>(&flipx_)) + sizeof(rotate_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.display)
}

void display::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_display_info_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flipx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vbstart_) -
      reinterpret_cast<char*>(&flipx_)) + sizeof(vbstart_));
  type_ = 1;
  rotate_ = 1;
}

display::~display() {
  // @@protoc_insertion_point(destructor:infoprotobuf.display)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void display::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void display::ArenaDtor(void* object) {
  display* _this = reinterpret_cast< display* >(object);
  (void)_this;
}
void display::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void display::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const display& display::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_display_info_2eproto.base);
  return *internal_default_instance();
}


void display::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.display)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&flipx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hbend_) -
        reinterpret_cast<char*>(&flipx_)) + sizeof(hbend_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&hbstart_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vbstart_) -
        reinterpret_cast<char*>(&hbstart_)) + sizeof(vbstart_));
    type_ = 1;
    rotate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* display::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.display.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .infoprotobuf.display_type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::display_type_IsValid(val))) {
            _internal_set_type(static_cast<::infoprotobuf::display_type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.display_rotation rotate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::display_rotation_IsValid(val))) {
            _internal_set_rotate(static_cast<::infoprotobuf::display_rotation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool flipx = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_flipx(&has_bits);
          flipx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double refresh = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_refresh(&has_bits);
          refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 pixclock = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pixclock(&has_bits);
          pixclock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 htotal = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_htotal(&has_bits);
          htotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hbend = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hbend(&has_bits);
          hbend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hbstart = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_hbstart(&has_bits);
          hbstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vtotal = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_vtotal(&has_bits);
          vtotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vbend = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_vbend(&has_bits);
          vbend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vbstart = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_vbstart(&has_bits);
          vbstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* display::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.display)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.display.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required .infoprotobuf.display_type type = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .infoprotobuf.display_rotation rotate = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rotate(), target);
  }

  // optional bool flipx = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_flipx(), target);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // required double refresh = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_refresh(), target);
  }

  // optional int32 pixclock = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pixclock(), target);
  }

  // optional int32 htotal = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_htotal(), target);
  }

  // optional int32 hbend = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_hbend(), target);
  }

  // optional int32 hbstart = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_hbstart(), target);
  }

  // optional int32 vtotal = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_vtotal(), target);
  }

  // optional int32 vbend = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_vbend(), target);
  }

  // optional int32 vbstart = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_vbstart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.display)
  return target;
}

size_t display::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.display)
  size_t total_size = 0;

  if (_internal_has_refresh()) {
    // required double refresh = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_type()) {
    // required .infoprotobuf.display_type type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t display::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.display)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001008) ^ 0x00001008) == 0) {  // All required fields are present.
    // required double refresh = 7;
    total_size += 1 + 8;

    // required .infoprotobuf.display_type type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional bool flipx = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 width = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional uint32 height = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional int32 pixclock = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pixclock());
    }

    // optional int32 htotal = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_htotal());
    }

    // optional int32 hbend = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hbend());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 hbstart = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hbstart());
    }

    // optional int32 vtotal = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vtotal());
    }

    // optional int32 vbend = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vbend());
    }

    // optional int32 vbstart = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vbstart());
    }

  }
  // optional .infoprotobuf.display_rotation rotate = 3;
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rotate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void display::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.display)
  GOOGLE_DCHECK_NE(&from, this);
  const display* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<display>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.display)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.display)
    MergeFrom(*source);
  }
}

void display::MergeFrom(const display& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.display)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      flipx_ = from.flipx_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      refresh_ = from.refresh_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      pixclock_ = from.pixclock_;
    }
    if (cached_has_bits & 0x00000040u) {
      htotal_ = from.htotal_;
    }
    if (cached_has_bits & 0x00000080u) {
      hbend_ = from.hbend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      hbstart_ = from.hbstart_;
    }
    if (cached_has_bits & 0x00000200u) {
      vtotal_ = from.vtotal_;
    }
    if (cached_has_bits & 0x00000400u) {
      vbend_ = from.vbend_;
    }
    if (cached_has_bits & 0x00000800u) {
      vbstart_ = from.vbstart_;
    }
    if (cached_has_bits & 0x00001000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00002000u) {
      rotate_ = from.rotate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void display::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.display)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void display::CopyFrom(const display& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.display)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool display::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void display::InternalSwap(display* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(display, vbstart_)
      + sizeof(display::vbstart_)
      - PROTOBUF_FIELD_OFFSET(display, flipx_)>(
          reinterpret_cast<char*>(&flipx_),
          reinterpret_cast<char*>(&other->flipx_));
  swap(type_, other->type_);
  swap(rotate_, other->rotate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata display::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sound::InitAsDefaultInstance() {
}
class sound::_Internal {
 public:
  using HasBits = decltype(std::declval<sound>()._has_bits_);
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

sound::sound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.sound)
}
sound::sound(const sound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channels_ = from.channels_;
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.sound)
}

void sound::SharedCtor() {
  channels_ = 0;
}

sound::~sound() {
  // @@protoc_insertion_point(destructor:infoprotobuf.sound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void sound::ArenaDtor(void* object) {
  sound* _this = reinterpret_cast< sound* >(object);
  (void)_this;
}
void sound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sound& sound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sound_info_2eproto.base);
  return *internal_default_instance();
}


void sound::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.sound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channels(&has_bits);
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.sound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 channels = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.sound)
  return target;
}

size_t sound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.sound)
  size_t total_size = 0;

  // required int32 channels = 1;
  if (_internal_has_channels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channels());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.sound)
  GOOGLE_DCHECK_NE(&from, this);
  const sound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.sound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.sound)
    MergeFrom(*source);
  }
}

void sound::MergeFrom(const sound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.sound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channels()) {
    _internal_set_channels(from._internal_channels());
  }
}

void sound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sound::CopyFrom(const sound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sound::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void sound::InternalSwap(sound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channels_, other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void condition::InitAsDefaultInstance() {
}
class condition::_Internal {
 public:
  using HasBits = decltype(std::declval<condition>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

condition::condition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.condition)
}
condition::condition(const condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  ::memcpy(&mask_, &from.mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&relation_) -
    reinterpret_cast<char*>(&mask_)) + sizeof(relation_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.condition)
}

void condition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_condition_info_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(value_));
  relation_ = 1;
}

condition::~condition() {
  // @@protoc_insertion_point(destructor:infoprotobuf.condition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void condition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void condition::ArenaDtor(void* object) {
  condition* _this = reinterpret_cast< condition* >(object);
  (void)_this;
}
void condition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const condition& condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_condition_info_2eproto.base);
  return *internal_default_instance();
}


void condition::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&mask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&mask_)) + sizeof(value_));
    relation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.condition.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mask(&has_bits);
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .infoprotobuf.condition.condition_relation relation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::condition_condition_relation_IsValid(val))) {
            _internal_set_relation(static_cast<::infoprotobuf::condition_condition_relation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.condition.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required uint32 mask = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mask(), target);
  }

  // required .infoprotobuf.condition.condition_relation relation = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_relation(), target);
  }

  // required uint32 value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.condition)
  return target;
}

size_t condition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.condition)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_mask()) {
    // required uint32 mask = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask());
  }

  if (_internal_has_value()) {
    // required uint32 value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (_internal_has_relation()) {
    // required .infoprotobuf.condition.condition_relation relation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relation());
  }

  return total_size;
}
size_t condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.condition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required uint32 mask = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask());

    // required uint32 value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());

    // required .infoprotobuf.condition.condition_relation relation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.condition)
  GOOGLE_DCHECK_NE(&from, this);
  const condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.condition)
    MergeFrom(*source);
  }
}

void condition::MergeFrom(const condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      mask_ = from.mask_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      relation_ = from.relation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void condition::CopyFrom(const condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool condition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void condition::InternalSwap(condition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(condition, value_)
      + sizeof(condition::value_)
      - PROTOBUF_FIELD_OFFSET(condition, mask_)>(
          reinterpret_cast<char*>(&mask_),
          reinterpret_cast<char*>(&other->mask_));
  swap(relation_, other->relation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void input_Control::InitAsDefaultInstance() {
}
class input_Control::_Internal {
 public:
  using HasBits = decltype(std::declval<input_Control>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_buttons(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reqbuttons(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sensitivity(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_keydelta(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ways(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ways2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ways3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

input_Control::input_Control(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.input.Control)
}
input_Control::input_Control(const input_Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  ways_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ways()) {
    ways_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ways(),
      GetArena());
  }
  ways2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ways2()) {
    ways2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ways2(),
      GetArena());
  }
  ways3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ways3()) {
    ways3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ways3(),
      GetArena());
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&player_)) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.input.Control)
}

void input_Control::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_input_Control_info_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ways_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ways2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ways3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&player_)) + sizeof(reverse_));
}

input_Control::~input_Control() {
  // @@protoc_insertion_point(destructor:infoprotobuf.input.Control)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void input_Control::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ways_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ways2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ways3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void input_Control::ArenaDtor(void* object) {
  input_Control* _this = reinterpret_cast< input_Control* >(object);
  (void)_this;
}
void input_Control::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void input_Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const input_Control& input_Control::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_input_Control_info_2eproto.base);
  return *internal_default_instance();
}


void input_Control::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.input.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ways_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ways2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ways3_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&player_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minimum_) -
        reinterpret_cast<char*>(&player_)) + sizeof(minimum_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&maximum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_) -
        reinterpret_cast<char*>(&maximum_)) + sizeof(reverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* input_Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.input.Control.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player(&has_bits);
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 buttons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_buttons(&has_bits);
          buttons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reqbuttons = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_reqbuttons(&has_bits);
          reqbuttons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minimum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_minimum(&has_bits);
          minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maximum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_maximum(&has_bits);
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sensitivity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sensitivity(&has_bits);
          sensitivity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 keydelta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_keydelta(&has_bits);
          keydelta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_reverse(&has_bits);
          reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ways = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ways();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.input.Control.ways");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ways2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_ways2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.input.Control.ways2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ways3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_ways3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.input.Control.ways3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* input_Control::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.input.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.input.Control.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional int32 player = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player(), target);
  }

  // optional int32 buttons = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_buttons(), target);
  }

  // optional int32 reqbuttons = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reqbuttons(), target);
  }

  // optional int32 minimum = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_minimum(), target);
  }

  // optional int32 maximum = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_maximum(), target);
  }

  // optional int32 sensitivity = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sensitivity(), target);
  }

  // optional int32 keydelta = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_keydelta(), target);
  }

  // optional bool reverse = 9 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_reverse(), target);
  }

  // optional string ways = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ways().data(), static_cast<int>(this->_internal_ways().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.input.Control.ways");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ways(), target);
  }

  // optional string ways2 = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ways2().data(), static_cast<int>(this->_internal_ways2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.input.Control.ways2");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_ways2(), target);
  }

  // optional string ways3 = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ways3().data(), static_cast<int>(this->_internal_ways3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.input.Control.ways3");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_ways3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.input.Control)
  return target;
}

size_t input_Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.input.Control)
  size_t total_size = 0;

  // required string type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string ways = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ways());
    }

    // optional string ways2 = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ways2());
    }

    // optional string ways3 = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ways3());
    }

    // optional int32 player = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player());
    }

    // optional int32 buttons = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_buttons());
    }

    // optional int32 reqbuttons = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reqbuttons());
    }

    // optional int32 minimum = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minimum());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 maximum = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maximum());
    }

    // optional int32 sensitivity = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sensitivity());
    }

    // optional int32 keydelta = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_keydelta());
    }

    // optional bool reverse = 9 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void input_Control::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.input.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const input_Control* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<input_Control>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.input.Control)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.input.Control)
    MergeFrom(*source);
  }
}

void input_Control::MergeFrom(const input_Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.input.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ways(from._internal_ways());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ways2(from._internal_ways2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ways3(from._internal_ways3());
    }
    if (cached_has_bits & 0x00000010u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000020u) {
      buttons_ = from.buttons_;
    }
    if (cached_has_bits & 0x00000040u) {
      reqbuttons_ = from.reqbuttons_;
    }
    if (cached_has_bits & 0x00000080u) {
      minimum_ = from.minimum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      maximum_ = from.maximum_;
    }
    if (cached_has_bits & 0x00000200u) {
      sensitivity_ = from.sensitivity_;
    }
    if (cached_has_bits & 0x00000400u) {
      keydelta_ = from.keydelta_;
    }
    if (cached_has_bits & 0x00000800u) {
      reverse_ = from.reverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void input_Control::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.input.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void input_Control::CopyFrom(const input_Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.input.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool input_Control::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void input_Control::InternalSwap(input_Control* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ways_.Swap(&other->ways_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ways2_.Swap(&other->ways2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ways3_.Swap(&other->ways3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(input_Control, reverse_)
      + sizeof(input_Control::reverse_)
      - PROTOBUF_FIELD_OFFSET(input_Control, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata input_Control::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void input::InitAsDefaultInstance() {
}
class input::_Internal {
 public:
  using HasBits = decltype(std::declval<input>()._has_bits_);
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tilt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coins(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

input::input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  control_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.input)
}
input::input(const input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      control_(from.control_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&service_, &from.service_,
    static_cast<size_t>(reinterpret_cast<char*>(&coins_) -
    reinterpret_cast<char*>(&service_)) + sizeof(coins_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.input)
}

void input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_input_info_2eproto.base);
  ::memset(&service_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coins_) -
      reinterpret_cast<char*>(&service_)) + sizeof(coins_));
}

input::~input() {
  // @@protoc_insertion_point(destructor:infoprotobuf.input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void input::ArenaDtor(void* object) {
  input* _this = reinterpret_cast< input* >(object);
  (void)_this;
}
void input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const input& input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_input_info_2eproto.base);
  return *internal_default_instance();
}


void input::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&service_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coins_) -
        reinterpret_cast<char*>(&service_)) + sizeof(coins_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool service = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_service(&has_bits);
          service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tilt = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tilt(&has_bits);
          tilt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_players(&has_bits);
          players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 coins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_coins(&has_bits);
          coins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.input.Control control = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool service = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_service(), target);
  }

  // optional bool tilt = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tilt(), target);
  }

  // required int32 players = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_players(), target);
  }

  // optional int32 coins = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_coins(), target);
  }

  // repeated .infoprotobuf.input.Control control = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_control_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_control(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.input)
  return target;
}

size_t input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.input)
  size_t total_size = 0;

  // required int32 players = 3;
  if (_internal_has_players()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_players());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infoprotobuf.input.Control control = 5;
  total_size += 1UL * this->_internal_control_size();
  for (const auto& msg : this->control_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool service = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool tilt = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 coins = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coins());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.input)
  GOOGLE_DCHECK_NE(&from, this);
  const input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.input)
    MergeFrom(*source);
  }
}

void input::MergeFrom(const input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_.MergeFrom(from.control_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      service_ = from.service_;
    }
    if (cached_has_bits & 0x00000002u) {
      tilt_ = from.tilt_;
    }
    if (cached_has_bits & 0x00000004u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00000008u) {
      coins_ = from.coins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void input::CopyFrom(const input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool input::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(control_)) return false;
  return true;
}

void input::InternalSwap(input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  control_.InternalSwap(&other->control_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(input, coins_)
      + sizeof(input::coins_)
      - PROTOBUF_FIELD_OFFSET(input, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dipswitch_DipLocation::InitAsDefaultInstance() {
}
class dipswitch_DipLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<dipswitch_DipLocation>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inverted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

dipswitch_DipLocation::dipswitch_DipLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.dipswitch.DipLocation)
}
dipswitch_DipLocation::dipswitch_DipLocation(const dipswitch_DipLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverted_) -
    reinterpret_cast<char*>(&number_)) + sizeof(inverted_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.dipswitch.DipLocation)
}

void dipswitch_DipLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dipswitch_DipLocation_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inverted_) -
      reinterpret_cast<char*>(&number_)) + sizeof(inverted_));
}

dipswitch_DipLocation::~dipswitch_DipLocation() {
  // @@protoc_insertion_point(destructor:infoprotobuf.dipswitch.DipLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dipswitch_DipLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void dipswitch_DipLocation::ArenaDtor(void* object) {
  dipswitch_DipLocation* _this = reinterpret_cast< dipswitch_DipLocation* >(object);
  (void)_this;
}
void dipswitch_DipLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dipswitch_DipLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dipswitch_DipLocation& dipswitch_DipLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dipswitch_DipLocation_info_2eproto.base);
  return *internal_default_instance();
}


void dipswitch_DipLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.dipswitch.DipLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inverted_) -
        reinterpret_cast<char*>(&number_)) + sizeof(inverted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dipswitch_DipLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.dipswitch.DipLocation.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inverted = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inverted(&has_bits);
          inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dipswitch_DipLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.dipswitch.DipLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.dipswitch.DipLocation.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint32 number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number(), target);
  }

  // optional bool inverted = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.dipswitch.DipLocation)
  return target;
}

size_t dipswitch_DipLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.dipswitch.DipLocation)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_number()) {
    // required uint32 number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  return total_size;
}
size_t dipswitch_DipLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.dipswitch.DipLocation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool inverted = 3 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dipswitch_DipLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.dipswitch.DipLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const dipswitch_DipLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dipswitch_DipLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.dipswitch.DipLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.dipswitch.DipLocation)
    MergeFrom(*source);
  }
}

void dipswitch_DipLocation::MergeFrom(const dipswitch_DipLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.dipswitch.DipLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      number_ = from.number_;
    }
    if (cached_has_bits & 0x00000004u) {
      inverted_ = from.inverted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dipswitch_DipLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.dipswitch.DipLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dipswitch_DipLocation::CopyFrom(const dipswitch_DipLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.dipswitch.DipLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dipswitch_DipLocation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void dipswitch_DipLocation::InternalSwap(dipswitch_DipLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dipswitch_DipLocation, inverted_)
      + sizeof(dipswitch_DipLocation::inverted_)
      - PROTOBUF_FIELD_OFFSET(dipswitch_DipLocation, number_)>(
          reinterpret_cast<char*>(&number_),
          reinterpret_cast<char*>(&other->number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dipswitch_DipLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dipswitch_DipValue::InitAsDefaultInstance() {
  ::infoprotobuf::_dipswitch_DipValue_default_instance_._instance.get_mutable()->condition_ = const_cast< ::infoprotobuf::condition*>(
      ::infoprotobuf::condition::internal_default_instance());
}
class dipswitch_DipValue::_Internal {
 public:
  using HasBits = decltype(std::declval<dipswitch_DipValue>()._has_bits_);
  static const ::infoprotobuf::condition& condition(const dipswitch_DipValue* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::infoprotobuf::condition&
dipswitch_DipValue::_Internal::condition(const dipswitch_DipValue* msg) {
  return *msg->condition_;
}
dipswitch_DipValue::dipswitch_DipValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.dipswitch.DipValue)
}
dipswitch_DipValue::dipswitch_DipValue(const dipswitch_DipValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::infoprotobuf::condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&default__) -
    reinterpret_cast<char*>(&value_)) + sizeof(default__));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.dipswitch.DipValue)
}

void dipswitch_DipValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dipswitch_DipValue_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&condition_)) + sizeof(default__));
}

dipswitch_DipValue::~dipswitch_DipValue() {
  // @@protoc_insertion_point(destructor:infoprotobuf.dipswitch.DipValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dipswitch_DipValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void dipswitch_DipValue::ArenaDtor(void* object) {
  dipswitch_DipValue* _this = reinterpret_cast< dipswitch_DipValue* >(object);
  (void)_this;
}
void dipswitch_DipValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dipswitch_DipValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dipswitch_DipValue& dipswitch_DipValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dipswitch_DipValue_info_2eproto.base);
  return *internal_default_instance();
}


void dipswitch_DipValue::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.dipswitch.DipValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default__) -
        reinterpret_cast<char*>(&value_)) + sizeof(default__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dipswitch_DipValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .infoprotobuf.condition condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.dipswitch.DipValue.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_default_(&has_bits);
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dipswitch_DipValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.dipswitch.DipValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .infoprotobuf.condition condition = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.dipswitch.DipValue.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  // optional bool default = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.dipswitch.DipValue)
  return target;
}

size_t dipswitch_DipValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.dipswitch.DipValue)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required uint32 value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  return total_size;
}
size_t dipswitch_DipValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.dipswitch.DipValue)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .infoprotobuf.condition condition = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // optional bool default = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dipswitch_DipValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.dipswitch.DipValue)
  GOOGLE_DCHECK_NE(&from, this);
  const dipswitch_DipValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dipswitch_DipValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.dipswitch.DipValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.dipswitch.DipValue)
    MergeFrom(*source);
  }
}

void dipswitch_DipValue::MergeFrom(const dipswitch_DipValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.dipswitch.DipValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_condition()->::infoprotobuf::condition::MergeFrom(from._internal_condition());
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      default__ = from.default__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dipswitch_DipValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.dipswitch.DipValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dipswitch_DipValue::CopyFrom(const dipswitch_DipValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.dipswitch.DipValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dipswitch_DipValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_condition()) {
    if (!condition_->IsInitialized()) return false;
  }
  return true;
}

void dipswitch_DipValue::InternalSwap(dipswitch_DipValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dipswitch_DipValue, default__)
      + sizeof(dipswitch_DipValue::default__)
      - PROTOBUF_FIELD_OFFSET(dipswitch_DipValue, condition_)>(
          reinterpret_cast<char*>(&condition_),
          reinterpret_cast<char*>(&other->condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dipswitch_DipValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dipswitch::InitAsDefaultInstance() {
  ::infoprotobuf::_dipswitch_default_instance_._instance.get_mutable()->condition_ = const_cast< ::infoprotobuf::condition*>(
      ::infoprotobuf::condition::internal_default_instance());
}
class dipswitch::_Internal {
 public:
  using HasBits = decltype(std::declval<dipswitch>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::infoprotobuf::condition& condition(const dipswitch* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::infoprotobuf::condition&
dipswitch::_Internal::condition(const dipswitch* msg) {
  return *msg->condition_;
}
dipswitch::dipswitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  diplocation_(arena),
  dipvalue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.dipswitch)
}
dipswitch::dipswitch(const dipswitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      diplocation_(from.diplocation_),
      dipvalue_(from.dipvalue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::infoprotobuf::condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  mask_ = from.mask_;
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.dipswitch)
}

void dipswitch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dipswitch_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_) -
      reinterpret_cast<char*>(&condition_)) + sizeof(mask_));
}

dipswitch::~dipswitch() {
  // @@protoc_insertion_point(destructor:infoprotobuf.dipswitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dipswitch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void dipswitch::ArenaDtor(void* object) {
  dipswitch* _this = reinterpret_cast< dipswitch* >(object);
  (void)_this;
}
void dipswitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dipswitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dipswitch& dipswitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dipswitch_info_2eproto.base);
  return *internal_default_instance();
}


void dipswitch::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.dipswitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diplocation_.Clear();
  dipvalue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
  }
  mask_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dipswitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.dipswitch.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.dipswitch.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mask(&has_bits);
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.dipswitch.DipLocation diplocation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diplocation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.condition condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.dipswitch.DipValue dipvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dipvalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dipswitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.dipswitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.dipswitch.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.dipswitch.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // required uint32 mask = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mask(), target);
  }

  // repeated .infoprotobuf.dipswitch.DipLocation diplocation = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diplocation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_diplocation(i), target, stream);
  }

  // optional .infoprotobuf.condition condition = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::condition(this), target, stream);
  }

  // repeated .infoprotobuf.dipswitch.DipValue dipvalue = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dipvalue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_dipvalue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.dipswitch)
  return target;
}

size_t dipswitch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.dipswitch)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_tag()) {
    // required string tag = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_mask()) {
    // required uint32 mask = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask());
  }

  return total_size;
}
size_t dipswitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.dipswitch)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string tag = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required uint32 mask = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infoprotobuf.dipswitch.DipLocation diplocation = 4;
  total_size += 1UL * this->_internal_diplocation_size();
  for (const auto& msg : this->diplocation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.dipswitch.DipValue dipvalue = 6;
  total_size += 1UL * this->_internal_dipvalue_size();
  for (const auto& msg : this->dipvalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .infoprotobuf.condition condition = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dipswitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.dipswitch)
  GOOGLE_DCHECK_NE(&from, this);
  const dipswitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dipswitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.dipswitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.dipswitch)
    MergeFrom(*source);
  }
}

void dipswitch::MergeFrom(const dipswitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.dipswitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diplocation_.MergeFrom(from.diplocation_);
  dipvalue_.MergeFrom(from.dipvalue_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_condition()->::infoprotobuf::condition::MergeFrom(from._internal_condition());
    }
    if (cached_has_bits & 0x00000008u) {
      mask_ = from.mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dipswitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.dipswitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dipswitch::CopyFrom(const dipswitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.dipswitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dipswitch::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(diplocation_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dipvalue_)) return false;
  if (_internal_has_condition()) {
    if (!condition_->IsInitialized()) return false;
  }
  return true;
}

void dipswitch::InternalSwap(dipswitch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  diplocation_.InternalSwap(&other->diplocation_);
  dipvalue_.InternalSwap(&other->dipvalue_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dipswitch, mask_)
      + sizeof(dipswitch::mask_)
      - PROTOBUF_FIELD_OFFSET(dipswitch, condition_)>(
          reinterpret_cast<char*>(&condition_),
          reinterpret_cast<char*>(&other->condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dipswitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void configuration_ConfLocation::InitAsDefaultInstance() {
}
class configuration_ConfLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<configuration_ConfLocation>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inverted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

configuration_ConfLocation::configuration_ConfLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.configuration.ConfLocation)
}
configuration_ConfLocation::configuration_ConfLocation(const configuration_ConfLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverted_) -
    reinterpret_cast<char*>(&number_)) + sizeof(inverted_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.configuration.ConfLocation)
}

void configuration_ConfLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configuration_ConfLocation_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inverted_) -
      reinterpret_cast<char*>(&number_)) + sizeof(inverted_));
}

configuration_ConfLocation::~configuration_ConfLocation() {
  // @@protoc_insertion_point(destructor:infoprotobuf.configuration.ConfLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void configuration_ConfLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void configuration_ConfLocation::ArenaDtor(void* object) {
  configuration_ConfLocation* _this = reinterpret_cast< configuration_ConfLocation* >(object);
  (void)_this;
}
void configuration_ConfLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void configuration_ConfLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configuration_ConfLocation& configuration_ConfLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configuration_ConfLocation_info_2eproto.base);
  return *internal_default_instance();
}


void configuration_ConfLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.configuration.ConfLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inverted_) -
        reinterpret_cast<char*>(&number_)) + sizeof(inverted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* configuration_ConfLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.configuration.ConfLocation.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inverted = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inverted(&has_bits);
          inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configuration_ConfLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.configuration.ConfLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.configuration.ConfLocation.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint32 number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number(), target);
  }

  // optional bool inverted = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.configuration.ConfLocation)
  return target;
}

size_t configuration_ConfLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.configuration.ConfLocation)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_number()) {
    // required uint32 number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  return total_size;
}
size_t configuration_ConfLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.configuration.ConfLocation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool inverted = 3 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configuration_ConfLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.configuration.ConfLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const configuration_ConfLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configuration_ConfLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.configuration.ConfLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.configuration.ConfLocation)
    MergeFrom(*source);
  }
}

void configuration_ConfLocation::MergeFrom(const configuration_ConfLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.configuration.ConfLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      number_ = from.number_;
    }
    if (cached_has_bits & 0x00000004u) {
      inverted_ = from.inverted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void configuration_ConfLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.configuration.ConfLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configuration_ConfLocation::CopyFrom(const configuration_ConfLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.configuration.ConfLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configuration_ConfLocation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void configuration_ConfLocation::InternalSwap(configuration_ConfLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(configuration_ConfLocation, inverted_)
      + sizeof(configuration_ConfLocation::inverted_)
      - PROTOBUF_FIELD_OFFSET(configuration_ConfLocation, number_)>(
          reinterpret_cast<char*>(&number_),
          reinterpret_cast<char*>(&other->number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata configuration_ConfLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void configuration_ConfSetting::InitAsDefaultInstance() {
  ::infoprotobuf::_configuration_ConfSetting_default_instance_._instance.get_mutable()->condition_ = const_cast< ::infoprotobuf::condition*>(
      ::infoprotobuf::condition::internal_default_instance());
}
class configuration_ConfSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<configuration_ConfSetting>()._has_bits_);
  static const ::infoprotobuf::condition& condition(const configuration_ConfSetting* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::infoprotobuf::condition&
configuration_ConfSetting::_Internal::condition(const configuration_ConfSetting* msg) {
  return *msg->condition_;
}
configuration_ConfSetting::configuration_ConfSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.configuration.ConfSetting)
}
configuration_ConfSetting::configuration_ConfSetting(const configuration_ConfSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::infoprotobuf::condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  default__ = from.default__;
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.configuration.ConfSetting)
}

void configuration_ConfSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configuration_ConfSetting_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&condition_)) + sizeof(default__));
}

configuration_ConfSetting::~configuration_ConfSetting() {
  // @@protoc_insertion_point(destructor:infoprotobuf.configuration.ConfSetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void configuration_ConfSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void configuration_ConfSetting::ArenaDtor(void* object) {
  configuration_ConfSetting* _this = reinterpret_cast< configuration_ConfSetting* >(object);
  (void)_this;
}
void configuration_ConfSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void configuration_ConfSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configuration_ConfSetting& configuration_ConfSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configuration_ConfSetting_info_2eproto.base);
  return *internal_default_instance();
}


void configuration_ConfSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.configuration.ConfSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
  }
  default__ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* configuration_ConfSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .infoprotobuf.condition condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.configuration.ConfSetting.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.configuration.ConfSetting.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_default_(&has_bits);
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configuration_ConfSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.configuration.ConfSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .infoprotobuf.condition condition = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.configuration.ConfSetting.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.configuration.ConfSetting.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // optional bool default = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.configuration.ConfSetting)
  return target;
}

size_t configuration_ConfSetting::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.configuration.ConfSetting)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return total_size;
}
size_t configuration_ConfSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.configuration.ConfSetting)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .infoprotobuf.condition condition = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional bool default = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configuration_ConfSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.configuration.ConfSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const configuration_ConfSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configuration_ConfSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.configuration.ConfSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.configuration.ConfSetting)
    MergeFrom(*source);
  }
}

void configuration_ConfSetting::MergeFrom(const configuration_ConfSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.configuration.ConfSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_condition()->::infoprotobuf::condition::MergeFrom(from._internal_condition());
    }
    if (cached_has_bits & 0x00000008u) {
      default__ = from.default__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void configuration_ConfSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.configuration.ConfSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configuration_ConfSetting::CopyFrom(const configuration_ConfSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.configuration.ConfSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configuration_ConfSetting::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_condition()) {
    if (!condition_->IsInitialized()) return false;
  }
  return true;
}

void configuration_ConfSetting::InternalSwap(configuration_ConfSetting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(configuration_ConfSetting, default__)
      + sizeof(configuration_ConfSetting::default__)
      - PROTOBUF_FIELD_OFFSET(configuration_ConfSetting, condition_)>(
          reinterpret_cast<char*>(&condition_),
          reinterpret_cast<char*>(&other->condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata configuration_ConfSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void configuration::InitAsDefaultInstance() {
  ::infoprotobuf::_configuration_default_instance_._instance.get_mutable()->condition_ = const_cast< ::infoprotobuf::condition*>(
      ::infoprotobuf::condition::internal_default_instance());
}
class configuration::_Internal {
 public:
  using HasBits = decltype(std::declval<configuration>()._has_bits_);
  static const ::infoprotobuf::condition& condition(const configuration* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::infoprotobuf::condition&
configuration::_Internal::condition(const configuration* msg) {
  return *msg->condition_;
}
configuration::configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conflocation_(arena),
  confsetting_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.configuration)
}
configuration::configuration(const configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      conflocation_(from.conflocation_),
      confsetting_(from.confsetting_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mask()) {
    mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mask(),
      GetArena());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::infoprotobuf::condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.configuration)
}

void configuration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configuration_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  condition_ = nullptr;
}

configuration::~configuration() {
  // @@protoc_insertion_point(destructor:infoprotobuf.configuration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void configuration::ArenaDtor(void* object) {
  configuration* _this = reinterpret_cast< configuration* >(object);
  (void)_this;
}
void configuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configuration& configuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configuration_info_2eproto.base);
  return *internal_default_instance();
}


void configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conflocation_.Clear();
  confsetting_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      mask_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .infoprotobuf.condition condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.configuration.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.configuration.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.configuration.mask");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.configuration.ConfLocation conflocation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conflocation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.configuration.ConfSetting confsetting = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_confsetting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .infoprotobuf.condition condition = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.configuration.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.configuration.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // required string mask = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mask().data(), static_cast<int>(this->_internal_mask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.configuration.mask");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mask(), target);
  }

  // repeated .infoprotobuf.configuration.ConfLocation conflocation = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conflocation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_conflocation(i), target, stream);
  }

  // repeated .infoprotobuf.configuration.ConfSetting confsetting = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_confsetting_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_confsetting(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.configuration)
  return target;
}

size_t configuration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.configuration)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_tag()) {
    // required string tag = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_mask()) {
    // required string mask = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mask());
  }

  return total_size;
}
size_t configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.configuration)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string tag = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required string mask = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mask());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infoprotobuf.configuration.ConfLocation conflocation = 5;
  total_size += 1UL * this->_internal_conflocation_size();
  for (const auto& msg : this->conflocation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .infoprotobuf.configuration.ConfSetting confsetting = 6;
  total_size += 1UL * this->_internal_confsetting_size();
  for (const auto& msg : this->confsetting_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .infoprotobuf.condition condition = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const configuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.configuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.configuration)
    MergeFrom(*source);
  }
}

void configuration::MergeFrom(const configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conflocation_.MergeFrom(from.conflocation_);
  confsetting_.MergeFrom(from.confsetting_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_mask(from._internal_mask());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_condition()->::infoprotobuf::condition::MergeFrom(from._internal_condition());
    }
  }
}

void configuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configuration::CopyFrom(const configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configuration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(conflocation_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(confsetting_)) return false;
  if (_internal_has_condition()) {
    if (!condition_->IsInitialized()) return false;
  }
  return true;
}

void configuration::InternalSwap(configuration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conflocation_.InternalSwap(&other->conflocation_);
  confsetting_.InternalSwap(&other->confsetting_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mask_.Swap(&other->mask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(condition_, other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata configuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void port_Analog::InitAsDefaultInstance() {
}
class port_Analog::_Internal {
 public:
  using HasBits = decltype(std::declval<port_Analog>()._has_bits_);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

port_Analog::port_Analog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.port.Analog)
}
port_Analog::port_Analog(const port_Analog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mask_ = from.mask_;
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.port.Analog)
}

void port_Analog::SharedCtor() {
  mask_ = 0u;
}

port_Analog::~port_Analog() {
  // @@protoc_insertion_point(destructor:infoprotobuf.port.Analog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void port_Analog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void port_Analog::ArenaDtor(void* object) {
  port_Analog* _this = reinterpret_cast< port_Analog* >(object);
  (void)_this;
}
void port_Analog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void port_Analog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const port_Analog& port_Analog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_port_Analog_info_2eproto.base);
  return *internal_default_instance();
}


void port_Analog::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.port.Analog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mask_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* port_Analog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mask(&has_bits);
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* port_Analog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.port.Analog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.port.Analog)
  return target;
}

size_t port_Analog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.port.Analog)
  size_t total_size = 0;

  // required uint32 mask = 1;
  if (_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void port_Analog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.port.Analog)
  GOOGLE_DCHECK_NE(&from, this);
  const port_Analog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<port_Analog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.port.Analog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.port.Analog)
    MergeFrom(*source);
  }
}

void port_Analog::MergeFrom(const port_Analog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.port.Analog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mask()) {
    _internal_set_mask(from._internal_mask());
  }
}

void port_Analog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.port.Analog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void port_Analog::CopyFrom(const port_Analog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.port.Analog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool port_Analog::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void port_Analog::InternalSwap(port_Analog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mask_, other->mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata port_Analog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void port::InitAsDefaultInstance() {
}
class port::_Internal {
 public:
  using HasBits = decltype(std::declval<port>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

port::port(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  analog_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.port)
}
port::port(const port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      analog_(from.analog_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.port)
}

void port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_port_info_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

port::~port() {
  // @@protoc_insertion_point(destructor:infoprotobuf.port)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void port::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void port::ArenaDtor(void* object) {
  port* _this = reinterpret_cast< port* >(object);
  (void)_this;
}
void port::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const port& port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_port_info_2eproto.base);
  return *internal_default_instance();
}


void port::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  analog_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.port.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.port.Analog analog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_analog(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.port.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // repeated .infoprotobuf.port.Analog analog = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_analog_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_analog(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.port)
  return target;
}

size_t port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.port)
  size_t total_size = 0;

  // required string tag = 1;
  if (_internal_has_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infoprotobuf.port.Analog analog = 2;
  total_size += 1UL * this->_internal_analog_size();
  for (const auto& msg : this->analog_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.port)
  GOOGLE_DCHECK_NE(&from, this);
  const port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.port)
    MergeFrom(*source);
  }
}

void port::MergeFrom(const port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  analog_.MergeFrom(from.analog_);
  if (from._internal_has_tag()) {
    _internal_set_tag(from._internal_tag());
  }
}

void port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void port::CopyFrom(const port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool port::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(analog_)) return false;
  return true;
}

void port::InternalSwap(port* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  analog_.InternalSwap(&other->analog_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata port::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void adjuster::InitAsDefaultInstance() {
  ::infoprotobuf::_adjuster_default_instance_._instance.get_mutable()->condition_ = const_cast< ::infoprotobuf::condition*>(
      ::infoprotobuf::condition::internal_default_instance());
}
class adjuster::_Internal {
 public:
  using HasBits = decltype(std::declval<adjuster>()._has_bits_);
  static const ::infoprotobuf::condition& condition(const adjuster* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::infoprotobuf::condition&
adjuster::_Internal::condition(const adjuster* msg) {
  return *msg->condition_;
}
adjuster::adjuster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.adjuster)
}
adjuster::adjuster(const adjuster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::infoprotobuf::condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  default__ = from.default__;
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.adjuster)
}

void adjuster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_adjuster_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&condition_)) + sizeof(default__));
}

adjuster::~adjuster() {
  // @@protoc_insertion_point(destructor:infoprotobuf.adjuster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void adjuster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void adjuster::ArenaDtor(void* object) {
  adjuster* _this = reinterpret_cast< adjuster* >(object);
  (void)_this;
}
void adjuster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void adjuster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const adjuster& adjuster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_adjuster_info_2eproto.base);
  return *internal_default_instance();
}


void adjuster::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.adjuster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
  }
  default__ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* adjuster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .infoprotobuf.condition condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.adjuster.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_default_(&has_bits);
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* adjuster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.adjuster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .infoprotobuf.condition condition = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.adjuster.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required uint32 default = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.adjuster)
  return target;
}

size_t adjuster::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.adjuster)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_default_()) {
    // required uint32 default = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_default_());
  }

  return total_size;
}
size_t adjuster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.adjuster)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 default = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_default_());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .infoprotobuf.condition condition = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void adjuster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.adjuster)
  GOOGLE_DCHECK_NE(&from, this);
  const adjuster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<adjuster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.adjuster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.adjuster)
    MergeFrom(*source);
  }
}

void adjuster::MergeFrom(const adjuster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.adjuster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_condition()->::infoprotobuf::condition::MergeFrom(from._internal_condition());
    }
    if (cached_has_bits & 0x00000004u) {
      default__ = from.default__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void adjuster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.adjuster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adjuster::CopyFrom(const adjuster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.adjuster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adjuster::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_condition()) {
    if (!condition_->IsInitialized()) return false;
  }
  return true;
}

void adjuster::InternalSwap(adjuster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(adjuster, default__)
      + sizeof(adjuster::default__)
      - PROTOBUF_FIELD_OFFSET(adjuster, condition_)>(
          reinterpret_cast<char*>(&condition_),
          reinterpret_cast<char*>(&other->condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata adjuster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void driver::InitAsDefaultInstance() {
}
class driver::_Internal {
 public:
  using HasBits = decltype(std::declval<driver>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_emulation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cocktail(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_savestate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_requireartwork(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unofficial(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nosoundhardware(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_incomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000b0) ^ 0x000000b0) != 0;
  }
};

driver::driver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.driver)
}
driver::driver(const driver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requireartwork_, &from.requireartwork_,
    static_cast<size_t>(reinterpret_cast<char*>(&savestate_) -
    reinterpret_cast<char*>(&requireartwork_)) + sizeof(savestate_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.driver)
}

void driver::SharedCtor() {
  ::memset(&requireartwork_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incomplete_) -
      reinterpret_cast<char*>(&requireartwork_)) + sizeof(incomplete_));
  status_ = 1;
  emulation_ = 1;
  cocktail_ = 1;
  savestate_ = 1;
}

driver::~driver() {
  // @@protoc_insertion_point(destructor:infoprotobuf.driver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void driver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void driver::ArenaDtor(void* object) {
  driver* _this = reinterpret_cast< driver* >(object);
  (void)_this;
}
void driver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void driver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const driver& driver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_driver_info_2eproto.base);
  return *internal_default_instance();
}


void driver::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.driver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&requireartwork_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incomplete_) -
      reinterpret_cast<char*>(&requireartwork_)) + sizeof(incomplete_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    status_ = 1;
    emulation_ = 1;
    cocktail_ = 1;
    savestate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* driver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .infoprotobuf.driver.driver_status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::driver_driver_status_IsValid(val))) {
            _internal_set_status(static_cast<::infoprotobuf::driver_driver_status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .infoprotobuf.driver.driver_status emulation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::driver_driver_status_IsValid(val))) {
            _internal_set_emulation(static_cast<::infoprotobuf::driver_driver_status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.driver.driver_status cocktail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::driver_driver_status_IsValid(val))) {
            _internal_set_cocktail(static_cast<::infoprotobuf::driver_driver_status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .infoprotobuf.driver.Supported savestate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::driver_Supported_IsValid(val))) {
            _internal_set_savestate(static_cast<::infoprotobuf::driver_Supported>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool requireartwork = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_requireartwork(&has_bits);
          requireartwork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unofficial = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_unofficial(&has_bits);
          unofficial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool nosoundhardware = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nosoundhardware(&has_bits);
          nosoundhardware_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool incomplete = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_incomplete(&has_bits);
          incomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* driver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.driver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .infoprotobuf.driver.driver_status status = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // required .infoprotobuf.driver.driver_status emulation = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_emulation(), target);
  }

  // optional .infoprotobuf.driver.driver_status cocktail = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_cocktail(), target);
  }

  // required .infoprotobuf.driver.Supported savestate = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_savestate(), target);
  }

  // optional bool requireartwork = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_requireartwork(), target);
  }

  // optional bool unofficial = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_unofficial(), target);
  }

  // optional bool nosoundhardware = 7 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_nosoundhardware(), target);
  }

  // optional bool incomplete = 8 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_incomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.driver)
  return target;
}

size_t driver::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.driver)
  size_t total_size = 0;

  if (_internal_has_status()) {
    // required .infoprotobuf.driver.driver_status status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (_internal_has_emulation()) {
    // required .infoprotobuf.driver.driver_status emulation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_emulation());
  }

  if (_internal_has_savestate()) {
    // required .infoprotobuf.driver.Supported savestate = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_savestate());
  }

  return total_size;
}
size_t driver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.driver)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000b0) ^ 0x000000b0) == 0) {  // All required fields are present.
    // required .infoprotobuf.driver.driver_status status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());

    // required .infoprotobuf.driver.driver_status emulation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_emulation());

    // required .infoprotobuf.driver.Supported savestate = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_savestate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool requireartwork = 5 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool unofficial = 6 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool nosoundhardware = 7 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool incomplete = 8 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  // optional .infoprotobuf.driver.driver_status cocktail = 3;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cocktail());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void driver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.driver)
  GOOGLE_DCHECK_NE(&from, this);
  const driver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<driver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.driver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.driver)
    MergeFrom(*source);
  }
}

void driver::MergeFrom(const driver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.driver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      requireartwork_ = from.requireartwork_;
    }
    if (cached_has_bits & 0x00000002u) {
      unofficial_ = from.unofficial_;
    }
    if (cached_has_bits & 0x00000004u) {
      nosoundhardware_ = from.nosoundhardware_;
    }
    if (cached_has_bits & 0x00000008u) {
      incomplete_ = from.incomplete_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      emulation_ = from.emulation_;
    }
    if (cached_has_bits & 0x00000040u) {
      cocktail_ = from.cocktail_;
    }
    if (cached_has_bits & 0x00000080u) {
      savestate_ = from.savestate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void driver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.driver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void driver::CopyFrom(const driver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.driver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool driver::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void driver::InternalSwap(driver* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(driver, incomplete_)
      + sizeof(driver::incomplete_)
      - PROTOBUF_FIELD_OFFSET(driver, requireartwork_)>(
          reinterpret_cast<char*>(&requireartwork_),
          reinterpret_cast<char*>(&other->requireartwork_));
  swap(status_, other->status_);
  swap(emulation_, other->emulation_);
  swap(cocktail_, other->cocktail_);
  swap(savestate_, other->savestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata driver::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void feature::InitAsDefaultInstance() {
}
class feature::_Internal {
 public:
  using HasBits = decltype(std::declval<feature>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overall(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

feature::feature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.feature)
}
feature::feature(const feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&overall_) -
    reinterpret_cast<char*>(&status_)) + sizeof(overall_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.feature)
}

void feature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_feature_info_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  overall_ = 1;
}

feature::~feature() {
  // @@protoc_insertion_point(destructor:infoprotobuf.feature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void feature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void feature::ArenaDtor(void* object) {
  feature* _this = reinterpret_cast< feature* >(object);
  (void)_this;
}
void feature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const feature& feature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_feature_info_2eproto.base);
  return *internal_default_instance();
}


void feature::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    status_ = 1;
    overall_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.feature.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.feature.feature_status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::feature_feature_status_IsValid(val))) {
            _internal_set_status(static_cast<::infoprotobuf::feature_feature_status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.feature.feature_status overall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::feature_feature_status_IsValid(val))) {
            _internal_set_overall(static_cast<::infoprotobuf::feature_feature_status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* feature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.feature.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional .infoprotobuf.feature.feature_status status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // optional .infoprotobuf.feature.feature_status overall = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_overall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.feature)
  return target;
}

size_t feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.feature)
  size_t total_size = 0;

  // required string type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .infoprotobuf.feature.feature_status status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .infoprotobuf.feature.feature_status overall = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_overall());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void feature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.feature)
  GOOGLE_DCHECK_NE(&from, this);
  const feature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<feature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.feature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.feature)
    MergeFrom(*source);
  }
}

void feature::MergeFrom(const feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      overall_ = from.overall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void feature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void feature::CopyFrom(const feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool feature::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void feature::InternalSwap(feature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
  swap(overall_, other->overall_);
}

::PROTOBUF_NAMESPACE_ID::Metadata feature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void device_DeviceInstance::InitAsDefaultInstance() {
}
class device_DeviceInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<device_DeviceInstance>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_briefname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

device_DeviceInstance::device_DeviceInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.device.DeviceInstance)
}
device_DeviceInstance::device_DeviceInstance(const device_DeviceInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  briefname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_briefname()) {
    briefname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_briefname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.device.DeviceInstance)
}

void device_DeviceInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_device_DeviceInstance_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  briefname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

device_DeviceInstance::~device_DeviceInstance() {
  // @@protoc_insertion_point(destructor:infoprotobuf.device.DeviceInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void device_DeviceInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  briefname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void device_DeviceInstance::ArenaDtor(void* object) {
  device_DeviceInstance* _this = reinterpret_cast< device_DeviceInstance* >(object);
  (void)_this;
}
void device_DeviceInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void device_DeviceInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const device_DeviceInstance& device_DeviceInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_device_DeviceInstance_info_2eproto.base);
  return *internal_default_instance();
}


void device_DeviceInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.device.DeviceInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      briefname_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* device_DeviceInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device.DeviceInstance.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string briefname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_briefname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device.DeviceInstance.briefname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* device_DeviceInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.device.DeviceInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device.DeviceInstance.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string briefname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_briefname().data(), static_cast<int>(this->_internal_briefname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device.DeviceInstance.briefname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_briefname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.device.DeviceInstance)
  return target;
}

size_t device_DeviceInstance::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.device.DeviceInstance)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_briefname()) {
    // required string briefname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_briefname());
  }

  return total_size;
}
size_t device_DeviceInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.device.DeviceInstance)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string briefname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_briefname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void device_DeviceInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.device.DeviceInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const device_DeviceInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<device_DeviceInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.device.DeviceInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.device.DeviceInstance)
    MergeFrom(*source);
  }
}

void device_DeviceInstance::MergeFrom(const device_DeviceInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.device.DeviceInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_briefname(from._internal_briefname());
    }
  }
}

void device_DeviceInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.device.DeviceInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_DeviceInstance::CopyFrom(const device_DeviceInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.device.DeviceInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device_DeviceInstance::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void device_DeviceInstance::InternalSwap(device_DeviceInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  briefname_.Swap(&other->briefname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata device_DeviceInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void device_Extension::InitAsDefaultInstance() {
}
class device_Extension::_Internal {
 public:
  using HasBits = decltype(std::declval<device_Extension>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

device_Extension::device_Extension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.device.Extension)
}
device_Extension::device_Extension(const device_Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.device.Extension)
}

void device_Extension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_device_Extension_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

device_Extension::~device_Extension() {
  // @@protoc_insertion_point(destructor:infoprotobuf.device.Extension)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void device_Extension::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void device_Extension::ArenaDtor(void* object) {
  device_Extension* _this = reinterpret_cast< device_Extension* >(object);
  (void)_this;
}
void device_Extension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void device_Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const device_Extension& device_Extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_device_Extension_info_2eproto.base);
  return *internal_default_instance();
}


void device_Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.device.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* device_Extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device.Extension.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* device_Extension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.device.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device.Extension.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.device.Extension)
  return target;
}

size_t device_Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.device.Extension)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void device_Extension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.device.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  const device_Extension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<device_Extension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.device.Extension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.device.Extension)
    MergeFrom(*source);
  }
}

void device_Extension::MergeFrom(const device_Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.device.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void device_Extension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.device.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_Extension::CopyFrom(const device_Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.device.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device_Extension::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void device_Extension::InternalSwap(device_Extension* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata device_Extension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void device::InitAsDefaultInstance() {
  ::infoprotobuf::_device_default_instance_._instance.get_mutable()->device_instance_ = const_cast< ::infoprotobuf::device_DeviceInstance*>(
      ::infoprotobuf::device_DeviceInstance::internal_default_instance());
}
class device::_Internal {
 public:
  using HasBits = decltype(std::declval<device>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fixed_image(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mandatory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_interface(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::infoprotobuf::device_DeviceInstance& device_instance(const device* msg);
  static void set_has_device_instance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::infoprotobuf::device_DeviceInstance&
device::_Internal::device_instance(const device* msg) {
  return *msg->device_instance_;
}
device::device(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  extension_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.device)
}
device::device(const device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  fixed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fixed_image()) {
    fixed_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fixed_image(),
      GetArena());
  }
  mandatory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mandatory()) {
    mandatory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mandatory(),
      GetArena());
  }
  interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_interface()) {
    interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface(),
      GetArena());
  }
  if (from._internal_has_device_instance()) {
    device_instance_ = new ::infoprotobuf::device_DeviceInstance(*from.device_instance_);
  } else {
    device_instance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.device)
}

void device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_device_info_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixed_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mandatory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_instance_ = nullptr;
}

device::~device() {
  // @@protoc_insertion_point(destructor:infoprotobuf.device)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void device::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixed_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mandatory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_instance_;
}

void device::ArenaDtor(void* object) {
  device* _this = reinterpret_cast< device* >(object);
  (void)_this;
}
void device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const device& device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_device_info_2eproto.base);
  return *internal_default_instance();
}


void device::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      fixed_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      mandatory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      interface_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(device_instance_ != nullptr);
      device_instance_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fixed_image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fixed_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device.fixed_image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mandatory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mandatory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device.mandatory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string interface = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_interface();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.device.interface");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .infoprotobuf.device.DeviceInstance device_instance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_instance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.device.Extension extension = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // optional string fixed_image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fixed_image().data(), static_cast<int>(this->_internal_fixed_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device.fixed_image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fixed_image(), target);
  }

  // optional string mandatory = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mandatory().data(), static_cast<int>(this->_internal_mandatory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device.mandatory");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mandatory(), target);
  }

  // optional string interface = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_interface().data(), static_cast<int>(this->_internal_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.device.interface");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_interface(), target);
  }

  // optional .infoprotobuf.device.DeviceInstance device_instance = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device_instance(this), target, stream);
  }

  // repeated .infoprotobuf.device.Extension extension = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.device)
  return target;
}

size_t device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.device)
  size_t total_size = 0;

  // required string type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infoprotobuf.device.Extension extension = 7;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string fixed_image = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fixed_image());
    }

    // optional string mandatory = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mandatory());
    }

    // optional string interface = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_interface());
    }

    // optional .infoprotobuf.device.DeviceInstance device_instance = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_instance_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.device)
  GOOGLE_DCHECK_NE(&from, this);
  const device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.device)
    MergeFrom(*source);
  }
}

void device::MergeFrom(const device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_fixed_image(from._internal_fixed_image());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_mandatory(from._internal_mandatory());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_interface(from._internal_interface());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_device_instance()->::infoprotobuf::device_DeviceInstance::MergeFrom(from._internal_device_instance());
    }
  }
}

void device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device::CopyFrom(const device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(extension_)) return false;
  if (_internal_has_device_instance()) {
    if (!device_instance_->IsInitialized()) return false;
  }
  return true;
}

void device::InternalSwap(device* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extension_.InternalSwap(&other->extension_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fixed_image_.Swap(&other->fixed_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mandatory_.Swap(&other->mandatory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_.Swap(&other->interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(device_instance_, other->device_instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void slot_SlotOption::InitAsDefaultInstance() {
}
class slot_SlotOption::_Internal {
 public:
  using HasBits = decltype(std::declval<slot_SlotOption>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

slot_SlotOption::slot_SlotOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.slot.SlotOption)
}
slot_SlotOption::slot_SlotOption(const slot_SlotOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  devname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_devname()) {
    devname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_devname(),
      GetArena());
  }
  default__ = from.default__;
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.slot.SlotOption)
}

void slot_SlotOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_slot_SlotOption_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default__ = false;
}

slot_SlotOption::~slot_SlotOption() {
  // @@protoc_insertion_point(destructor:infoprotobuf.slot.SlotOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void slot_SlotOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void slot_SlotOption::ArenaDtor(void* object) {
  slot_SlotOption* _this = reinterpret_cast< slot_SlotOption* >(object);
  (void)_this;
}
void slot_SlotOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void slot_SlotOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const slot_SlotOption& slot_SlotOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_slot_SlotOption_info_2eproto.base);
  return *internal_default_instance();
}


void slot_SlotOption::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.slot.SlotOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      devname_.ClearNonDefaultToEmpty();
    }
  }
  default__ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* slot_SlotOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.slot.SlotOption.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string devname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_devname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.slot.SlotOption.devname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_default_(&has_bits);
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* slot_SlotOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.slot.SlotOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.slot.SlotOption.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string devname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_devname().data(), static_cast<int>(this->_internal_devname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.slot.SlotOption.devname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devname(), target);
  }

  // optional bool default = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.slot.SlotOption)
  return target;
}

size_t slot_SlotOption::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.slot.SlotOption)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_devname()) {
    // required string devname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devname());
  }

  return total_size;
}
size_t slot_SlotOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.slot.SlotOption)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string devname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool default = 3 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void slot_SlotOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.slot.SlotOption)
  GOOGLE_DCHECK_NE(&from, this);
  const slot_SlotOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<slot_SlotOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.slot.SlotOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.slot.SlotOption)
    MergeFrom(*source);
  }
}

void slot_SlotOption::MergeFrom(const slot_SlotOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.slot.SlotOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_devname(from._internal_devname());
    }
    if (cached_has_bits & 0x00000004u) {
      default__ = from.default__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void slot_SlotOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.slot.SlotOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slot_SlotOption::CopyFrom(const slot_SlotOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.slot.SlotOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slot_SlotOption::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void slot_SlotOption::InternalSwap(slot_SlotOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  devname_.Swap(&other->devname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(default__, other->default__);
}

::PROTOBUF_NAMESPACE_ID::Metadata slot_SlotOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void slot::InitAsDefaultInstance() {
}
class slot::_Internal {
 public:
  using HasBits = decltype(std::declval<slot>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

slot::slot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slotoption_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.slot)
}
slot::slot(const slot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slotoption_(from.slotoption_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.slot)
}

void slot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_slot_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

slot::~slot() {
  // @@protoc_insertion_point(destructor:infoprotobuf.slot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void slot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void slot::ArenaDtor(void* object) {
  slot* _this = reinterpret_cast< slot* >(object);
  (void)_this;
}
void slot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void slot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const slot& slot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_slot_info_2eproto.base);
  return *internal_default_instance();
}


void slot::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slotoption_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* slot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.slot.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .infoprotobuf.slot.SlotOption slotoption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slotoption(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* slot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.slot.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .infoprotobuf.slot.SlotOption slotoption = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slotoption_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slotoption(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.slot)
  return target;
}

size_t slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.slot)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .infoprotobuf.slot.SlotOption slotoption = 2;
  total_size += 1UL * this->_internal_slotoption_size();
  for (const auto& msg : this->slotoption_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void slot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.slot)
  GOOGLE_DCHECK_NE(&from, this);
  const slot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<slot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.slot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.slot)
    MergeFrom(*source);
  }
}

void slot::MergeFrom(const slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slotoption_.MergeFrom(from.slotoption_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void slot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slot::CopyFrom(const slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(slotoption_)) return false;
  return true;
}

void slot::InternalSwap(slot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slotoption_.InternalSwap(&other->slotoption_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata slot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void softwarelist::InitAsDefaultInstance() {
}
class softwarelist::_Internal {
 public:
  using HasBits = decltype(std::declval<softwarelist>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

softwarelist::softwarelist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.softwarelist)
}
softwarelist::softwarelist(const softwarelist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filter()) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filter(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.softwarelist)
}

void softwarelist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_softwarelist_info_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

softwarelist::~softwarelist() {
  // @@protoc_insertion_point(destructor:infoprotobuf.softwarelist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void softwarelist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void softwarelist::ArenaDtor(void* object) {
  softwarelist* _this = reinterpret_cast< softwarelist* >(object);
  (void)_this;
}
void softwarelist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void softwarelist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const softwarelist& softwarelist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_softwarelist_info_2eproto.base);
  return *internal_default_instance();
}


void softwarelist::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.softwarelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      filter_.ClearNonDefaultToEmpty();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* softwarelist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.softwarelist.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.softwarelist.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .infoprotobuf.softwarelist.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::infoprotobuf::softwarelist_Status_IsValid(val))) {
            _internal_set_status(static_cast<::infoprotobuf::softwarelist_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.softwarelist.filter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* softwarelist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.softwarelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.softwarelist.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.softwarelist.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required .infoprotobuf.softwarelist.Status status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional string filter = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.softwarelist.filter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.softwarelist)
  return target;
}

size_t softwarelist::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:infoprotobuf.softwarelist)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_status()) {
    // required .infoprotobuf.softwarelist.Status status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return total_size;
}
size_t softwarelist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.softwarelist)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .infoprotobuf.softwarelist.Status status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string filter = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void softwarelist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.softwarelist)
  GOOGLE_DCHECK_NE(&from, this);
  const softwarelist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<softwarelist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.softwarelist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.softwarelist)
    MergeFrom(*source);
  }
}

void softwarelist::MergeFrom(const softwarelist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.softwarelist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_filter(from._internal_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void softwarelist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.softwarelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void softwarelist::CopyFrom(const softwarelist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.softwarelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool softwarelist::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void softwarelist::InternalSwap(softwarelist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata softwarelist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ramoption::InitAsDefaultInstance() {
}
class ramoption::_Internal {
 public:
  using HasBits = decltype(std::declval<ramoption>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ramoption::ramoption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:infoprotobuf.ramoption)
}
ramoption::ramoption(const ramoption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&default__, &from.default__,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&default__)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:infoprotobuf.ramoption)
}

void ramoption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ramoption_info_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&default__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&default__)) + sizeof(value_));
}

ramoption::~ramoption() {
  // @@protoc_insertion_point(destructor:infoprotobuf.ramoption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ramoption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ramoption::ArenaDtor(void* object) {
  ramoption* _this = reinterpret_cast< ramoption* >(object);
  (void)_this;
}
void ramoption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ramoption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ramoption& ramoption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ramoption_info_2eproto.base);
  return *internal_default_instance();
}


void ramoption::Clear() {
// @@protoc_insertion_point(message_clear_start:infoprotobuf.ramoption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&default__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&default__)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ramoption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "infoprotobuf.ramoption.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_default_(&has_bits);
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ramoption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoprotobuf.ramoption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "infoprotobuf.ramoption.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool default = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_default_(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoprotobuf.ramoption)
  return target;
}

size_t ramoption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:infoprotobuf.ramoption)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool default = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ramoption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:infoprotobuf.ramoption)
  GOOGLE_DCHECK_NE(&from, this);
  const ramoption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ramoption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:infoprotobuf.ramoption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:infoprotobuf.ramoption)
    MergeFrom(*source);
  }
}

void ramoption::MergeFrom(const ramoption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:infoprotobuf.ramoption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      default__ = from.default__;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ramoption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:infoprotobuf.ramoption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ramoption::CopyFrom(const ramoption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:infoprotobuf.ramoption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ramoption::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ramoption::InternalSwap(ramoption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ramoption, value_)
      + sizeof(ramoption::value_)
      - PROTOBUF_FIELD_OFFSET(ramoption, default__)>(
          reinterpret_cast<char*>(&default__),
          reinterpret_cast<char*>(&other->default__));
}

::PROTOBUF_NAMESPACE_ID::Metadata ramoption::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace infoprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::infoprotobuf::mame* Arena::CreateMaybeMessage< ::infoprotobuf::mame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::mame >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::machine* Arena::CreateMaybeMessage< ::infoprotobuf::machine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::machine >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::biosset* Arena::CreateMaybeMessage< ::infoprotobuf::biosset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::biosset >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::rom* Arena::CreateMaybeMessage< ::infoprotobuf::rom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::rom >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::disk* Arena::CreateMaybeMessage< ::infoprotobuf::disk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::disk >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::hashes* Arena::CreateMaybeMessage< ::infoprotobuf::hashes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::hashes >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::device_ref* Arena::CreateMaybeMessage< ::infoprotobuf::device_ref >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::device_ref >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::chip* Arena::CreateMaybeMessage< ::infoprotobuf::chip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::chip >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::sample* Arena::CreateMaybeMessage< ::infoprotobuf::sample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::sample >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::display* Arena::CreateMaybeMessage< ::infoprotobuf::display >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::display >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::sound* Arena::CreateMaybeMessage< ::infoprotobuf::sound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::sound >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::condition* Arena::CreateMaybeMessage< ::infoprotobuf::condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::condition >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::input_Control* Arena::CreateMaybeMessage< ::infoprotobuf::input_Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::input_Control >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::input* Arena::CreateMaybeMessage< ::infoprotobuf::input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::input >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::dipswitch_DipLocation* Arena::CreateMaybeMessage< ::infoprotobuf::dipswitch_DipLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::dipswitch_DipLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::dipswitch_DipValue* Arena::CreateMaybeMessage< ::infoprotobuf::dipswitch_DipValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::dipswitch_DipValue >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::dipswitch* Arena::CreateMaybeMessage< ::infoprotobuf::dipswitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::dipswitch >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::configuration_ConfLocation* Arena::CreateMaybeMessage< ::infoprotobuf::configuration_ConfLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::configuration_ConfLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::configuration_ConfSetting* Arena::CreateMaybeMessage< ::infoprotobuf::configuration_ConfSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::configuration_ConfSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::configuration* Arena::CreateMaybeMessage< ::infoprotobuf::configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::port_Analog* Arena::CreateMaybeMessage< ::infoprotobuf::port_Analog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::port_Analog >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::port* Arena::CreateMaybeMessage< ::infoprotobuf::port >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::port >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::adjuster* Arena::CreateMaybeMessage< ::infoprotobuf::adjuster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::adjuster >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::driver* Arena::CreateMaybeMessage< ::infoprotobuf::driver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::driver >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::feature* Arena::CreateMaybeMessage< ::infoprotobuf::feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::feature >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::device_DeviceInstance* Arena::CreateMaybeMessage< ::infoprotobuf::device_DeviceInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::device_DeviceInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::device_Extension* Arena::CreateMaybeMessage< ::infoprotobuf::device_Extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::device_Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::device* Arena::CreateMaybeMessage< ::infoprotobuf::device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::device >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::slot_SlotOption* Arena::CreateMaybeMessage< ::infoprotobuf::slot_SlotOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::slot_SlotOption >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::slot* Arena::CreateMaybeMessage< ::infoprotobuf::slot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::slot >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::softwarelist* Arena::CreateMaybeMessage< ::infoprotobuf::softwarelist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::softwarelist >(arena);
}
template<> PROTOBUF_NOINLINE ::infoprotobuf::ramoption* Arena::CreateMaybeMessage< ::infoprotobuf::ramoption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::infoprotobuf::ramoption >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
